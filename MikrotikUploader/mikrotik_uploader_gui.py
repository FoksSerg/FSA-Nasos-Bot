#!/usr/bin/env python3
"""
MikrotikUploader GUI - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ RouterOS

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ä–æ—É—Ç–µ—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ (—Å–∫—Ä–∏–ø—Ç—ã, —à–µ–¥—É–ª–µ—Ä—ã)
- –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ –∏ –æ—Ç–º–µ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏

–ê–≤—Ç–æ—Ä: NasosRunner Project
–í–µ—Ä—Å–∏—è: 1.0
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
import os
import threading
import queue
import codecs
import glob
from datetime import datetime
from mikrotik_uploader import MikrotikUploader, find_codenosos_dir

class RouterConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    def __init__(self, name="", ip="", username="", password="", port=8728):
        self.name = name
        self.ip = ip
        self.username = username
        self.password = password
        self.port = port
    
    def to_dict(self):
        return {
            'name': self.name,
            'ip': self.ip,
            'username': self.username,
            'password': self.password,
            'port': self.port
        }
    
    @classmethod
    def from_dict(cls, data):
        return cls(
            data.get('name', ''),
            data.get('ip', ''),
            data.get('username', ''),
            data.get('password', ''),
            data.get('port', 8728)
        )

class MikrotikUploaderGUI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, root):
        self.root = root
        self.root.title("MikrotikUploader GUI v1.0")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.routers = []  # –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.selected_router = None  # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        self.source_directory = ""  # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
        self.file_vars = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ñ–∞–π–ª–æ–≤
        self.log_queue = queue.Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.saved_router_index = -1
        self.saved_column_widths = {}
        self.saved_window_geometry = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞
        self.max_log_lines = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ
        self.log_mode = "full"  # "full" –∏–ª–∏ "compact"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
        self.process_log_queue()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        self.show_window_on_top()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ (—É–±–∏—Ä–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–µ–π–º)
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_routers_tab()
        self.create_files_tab()
        self.create_content_tab()
        self.create_upload_tab()
        
    def create_routers_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏."""
        routers_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(routers_frame, text="üåê –†–æ—É—Ç–µ—Ä—ã")
        
        # –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        list_frame = ttk.LabelFrame(routers_frame, text="–°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤", padding="5")
        list_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Treeview –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        columns = ("name", "ip", "username", "port")
        self.routers_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.routers_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.routers_tree.heading("ip", text="IP –∞–¥—Ä–µ—Å")
        self.routers_tree.heading("username", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.routers_tree.heading("port", text="–ü–æ—Ä—Ç")
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.routers_tree.column("name", width=200)
        self.routers_tree.column("ip", width=150)
        self.routers_tree.column("username", width=120)
        self.routers_tree.column("port", width=80)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar_routers = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.routers_tree.yview)
        self.routers_tree.configure(yscrollcommand=scrollbar_routers.set)
        
        self.routers_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_routers.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.routers_tree.bind("<Double-1>", lambda e: self.select_router_from_list())
        
        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏
        buttons_frame = ttk.Frame(routers_frame)
        buttons_frame.grid(row=1, column=0, pady=10)
        
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üîó –¢–µ—Å—Ç —Å–≤—è–∑–∏", command=self.test_connection).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å", command=self.select_router_from_list).pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        status_frame = ttk.LabelFrame(routers_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä", padding="5")
        status_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.active_router_label = ttk.Label(status_frame, text="–†–æ—É—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                                           font=('Arial', 12, 'bold'), foreground='blue')
        self.active_router_label.pack()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
        routers_frame.columnconfigure(0, weight=1)
        routers_frame.rowconfigure(0, weight=1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.refresh_routers_list()
    
    def create_files_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
        files_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(files_frame, text="üìÅ –§–∞–π–ª—ã")
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
        dir_frame = ttk.LabelFrame(files_frame, text="–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏", padding="5")
        dir_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.source_dir_var = tk.StringVar()
        dir_entry = ttk.Entry(dir_frame, textvariable=self.source_dir_var, width=60)
        dir_entry.grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(dir_frame, text="üìÇ –û–±–∑–æ—Ä", command=self.browse_source_directory).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(dir_frame, text="üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫", command=self.auto_find_directory).grid(row=0, column=2)
        
        # –°–æ–∑–¥–∞–µ–º PanedWindow –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        paned_window = ttk.PanedWindow(files_frame, orient=tk.HORIZONTAL)
        paned_window.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        
        # –õ–ï–í–ê–Ø –ß–ê–°–¢–¨: –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        local_frame = ttk.LabelFrame(paned_window, text="–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", padding="5")
        paned_window.add(local_frame, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–æ–≤
        file_buttons_frame = ttk.Frame(local_frame)
        file_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(file_buttons_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", command=self.select_all_files).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(file_buttons_frame, text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", command=self.deselect_all_files).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(file_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_files_list).pack(side=tk.LEFT)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        file_columns = ("name", "size", "modified")
        self.files_tree = ttk.Treeview(local_frame, columns=file_columns, show="tree headings", height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.files_tree.heading("#0", text="‚òë –í—ã–±—Ä–∞—Ç—å", command=lambda: self.sort_treeview(self.files_tree, "#0", False))
        self.files_tree.heading("name", text="–ò–º—è —Ñ–∞–π–ª–∞ ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "name", False))
        self.files_tree.heading("size", text="–†–∞–∑–º–µ—Ä (–±–∞–π—Ç) ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "size", True))
        self.files_tree.heading("modified", text="–ò–∑–º–µ–Ω–µ–Ω ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "modified", False))
        
        self.files_tree.column("#0", width=80, anchor=tk.CENTER)
        self.files_tree.column("name", width=200, anchor=tk.W)
        self.files_tree.column("size", width=100, anchor=tk.E)
        self.files_tree.column("modified", width=150, anchor=tk.W)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        self.files_tree.configure(style="Custom.Treeview")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        self.files_tree.bind("<Button-1>", self.on_file_tree_click)
        
        scrollbar_files = ttk.Scrollbar(local_frame, orient=tk.VERTICAL, command=self.files_tree.yview)
        self.files_tree.configure(yscrollcommand=scrollbar_files.set)
        
        self.files_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_files.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        local_frame.columnconfigure(0, weight=1)
        local_frame.rowconfigure(1, weight=1)
        
        
        # –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –§–∞–π–ª—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
        remote_frame = ttk.LabelFrame(paned_window, text="–§–∞–π–ª—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        paned_window.add(remote_frame, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        remote_buttons_frame = ttk.Frame(remote_frame)
        remote_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(remote_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.auto_load_router_content).pack(side=tk.LEFT, padx=(0, 5))
        self.remote_status_var = tk.StringVar(value="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
        ttk.Label(remote_buttons_frame, textvariable=self.remote_status_var).pack(side=tk.LEFT)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ (—Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç—ã)
        remote_columns = ("name", "size")
        self.remote_scripts_tree = ttk.Treeview(remote_frame, columns=remote_columns, show="headings", height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.remote_scripts_tree.heading("name", text="–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ ‚Üï", command=lambda: self.sort_treeview(self.remote_scripts_tree, "name", False))
        self.remote_scripts_tree.heading("size", text="–†–∞–∑–º–µ—Ä (–±–∞–π—Ç) ‚Üï", command=lambda: self.sort_treeview(self.remote_scripts_tree, "size", True))
        
        self.remote_scripts_tree.column("name", width=250, anchor=tk.W)
        self.remote_scripts_tree.column("size", width=120, anchor=tk.E)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        self.remote_scripts_tree.configure(style="Custom.Treeview")
        
        scrollbar_remote = ttk.Scrollbar(remote_frame, orient=tk.VERTICAL, command=self.remote_scripts_tree.yview)
        self.remote_scripts_tree.configure(yscrollcommand=scrollbar_remote.set)
        
        self.remote_scripts_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_remote.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        remote_frame.columnconfigure(0, weight=1)
        remote_frame.rowconfigure(1, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        files_frame.columnconfigure(0, weight=1)
        files_frame.rowconfigure(1, weight=1)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        self.file_vars = {}  # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    
    def on_file_tree_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–µ—Ä–µ–≤—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤."""
        region = self.files_tree.identify_region(event.x, event.y)
        if region == "tree":
            item = self.files_tree.identify_row(event.y)
            if item:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
                current_text = self.files_tree.item(item, "text")
                if current_text.startswith("‚òë"):
                    self.files_tree.item(item, text="‚òê")
                    self.file_vars[item] = False
                else:
                    self.files_tree.item(item, text="‚òë")
                    self.file_vars[item] = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
                self.update_upload_info()
                return "break"  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    
    def create_content_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        content_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(content_frame, text="üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_frame = ttk.Frame(content_frame)
        connect_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(connect_frame, text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.load_router_content).pack(side=tk.LEFT, padx=(0, 10))
        
        self.content_status_var = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        ttk.Label(connect_frame, textvariable=self.content_status_var).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        lists_frame = ttk.Frame(content_frame)
        lists_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –°–∫—Ä–∏–ø—Ç—ã
        scripts_frame = ttk.LabelFrame(lists_frame, text="–°–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        scripts_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        script_columns = ("name", "size")
        self.scripts_tree = ttk.Treeview(scripts_frame, columns=script_columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.scripts_tree.heading("name", text="–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ ‚Üï", command=lambda: self.sort_treeview(self.scripts_tree, "name", False))
        self.scripts_tree.heading("size", text="–†–∞–∑–º–µ—Ä (–±–∞–π—Ç) ‚Üï", command=lambda: self.sort_treeview(self.scripts_tree, "size", True))
        
        self.scripts_tree.column("name", width=300, anchor=tk.W)
        self.scripts_tree.column("size", width=150, anchor=tk.E)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –µ—â–µ –±–æ–ª—å—à–µ
        style = ttk.Style()
        style.configure("Custom.Treeview", font=('Arial', 14), rowheight=25)
        style.configure("Custom.Treeview.Heading", font=('Arial', 12, 'bold'))
        self.scripts_tree.configure(style="Custom.Treeview")
        
        scrollbar_scripts = ttk.Scrollbar(scripts_frame, orient=tk.VERTICAL, command=self.scripts_tree.yview)
        self.scripts_tree.configure(yscrollcommand=scrollbar_scripts.set)
        
        self.scripts_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_scripts.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        scripts_frame.columnconfigure(0, weight=1)
        scripts_frame.rowconfigure(0, weight=1)
        
        # –®–µ–¥—É–ª–µ—Ä—ã
        schedulers_frame = ttk.LabelFrame(lists_frame, text="–®–µ–¥—É–ª–µ—Ä—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        schedulers_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —à–µ–¥—É–ª–µ—Ä–æ–≤ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        scheduler_columns = ("name", "status", "next_run")
        self.schedulers_tree = ttk.Treeview(schedulers_frame, columns=scheduler_columns, show="headings", height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —à–µ–¥—É–ª–µ—Ä–æ–≤
        self.schedulers_tree.heading("name", text="–ò–º—è —à–µ–¥—É–ª–µ—Ä–∞ ‚Üï", command=lambda: self.sort_treeview(self.schedulers_tree, "name", False))
        self.schedulers_tree.heading("status", text="–°—Ç–∞—Ç—É—Å ‚Üï", command=lambda: self.sort_treeview(self.schedulers_tree, "status", False))
        self.schedulers_tree.heading("next_run", text="–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ ‚Üï", command=lambda: self.sort_treeview(self.schedulers_tree, "next_run", False))
        
        self.schedulers_tree.column("name", width=250, anchor=tk.W)
        self.schedulers_tree.column("status", width=100, anchor=tk.CENTER)
        self.schedulers_tree.column("next_run", width=200, anchor=tk.W)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞
        self.schedulers_tree.configure(style="Custom.Treeview")
        
        scrollbar_schedulers = ttk.Scrollbar(schedulers_frame, orient=tk.VERTICAL, command=self.schedulers_tree.yview)
        self.schedulers_tree.configure(yscrollcommand=scrollbar_schedulers.set)
        
        self.schedulers_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_schedulers.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        schedulers_frame.columnconfigure(0, weight=1)
        schedulers_frame.rowconfigure(0, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        content_frame.columnconfigure(0, weight=1)
        content_frame.rowconfigure(1, weight=1)
        lists_frame.columnconfigure(0, weight=1)
        lists_frame.columnconfigure(1, weight=1)
        lists_frame.rowconfigure(0, weight=1)
    
    def create_upload_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        upload_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(upload_frame, text="üöÄ –ó–∞–≥—Ä—É–∑–∫–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
        info_frame = ttk.LabelFrame(upload_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ", padding="5")
        info_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.upload_info_text = tk.Text(info_frame, height=4, state=tk.DISABLED)
        self.upload_info_text.grid(row=0, column=0, sticky=(tk.W, tk.E))
        info_frame.columnconfigure(0, weight=1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        progress_frame = ttk.LabelFrame(upload_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å", padding="5")
        progress_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ")
        self.progress_label.grid(row=1, column=0)
        
        progress_frame.columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(upload_frame)
        control_frame.grid(row=2, column=0, pady=(0, 10))
        
        self.start_button = ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", 
                                     command=self.start_upload, state=tk.DISABLED)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                    command=self.stop_upload, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_frame = ttk.LabelFrame(upload_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.log_text = scrolledtext.ScrolledText(log_frame, height=25, state=tk.DISABLED, 
                                                 font=('Consolas', 12))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º –≤–Ω–∏–∑—É
        log_settings_frame = ttk.LabelFrame(upload_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞", padding="5")
        log_settings_frame.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=(5, 0))
        
        ttk.Button(log_settings_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log).pack(side=tk.LEFT, padx=(0, 15))
        
        # –†–µ–∂–∏–º –ª–æ–≥–∞ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏
        ttk.Label(log_settings_frame, text="–†–µ–∂–∏–º –ª–æ–≥–∞:").pack(side=tk.LEFT, padx=(0, 8))
        self.log_mode_var = tk.StringVar(value=self.log_mode)
        
        ttk.Radiobutton(log_settings_frame, text="–ü–æ–ª–Ω—ã–π", variable=self.log_mode_var, 
                       value="full", command=self.on_log_mode_change).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Radiobutton(log_settings_frame, text="–°–∂–∞—Ç—ã–π", variable=self.log_mode_var, 
                       value="compact", command=self.on_log_mode_change).pack(side=tk.LEFT, padx=(0, 15))
        
        ttk.Label(log_settings_frame, text=f"–ú–∞–∫—Å. —Å—Ç—Ä–æ–∫: {self.max_log_lines}").pack(side=tk.LEFT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        upload_frame.columnconfigure(0, weight=1)
        upload_frame.rowconfigure(3, weight=1)  # –õ–æ–≥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.upload_thread = None
        self.upload_stop_flag = threading.Event()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        self.update_upload_info()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.auto_find_directory()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.restore_ui_settings()
    
    def log_message(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.log_mode == "compact":
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if level in ["ERROR", "WARNING"]:
                formatted_message = f"[{timestamp}] {level}: {message}\n"
            elif "‚úÖ" in message or "‚ùå" in message or "–ó–∞–≥—Ä—É–∂–µ–Ω–æ" in message or "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in message:
                formatted_message = f"[{timestamp}] {message}\n"
            else:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        else:
            # –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_message = f"[{timestamp}] {level}: {message}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.log_queue.put(formatted_message)
    
    def update_window_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        base_title = "MikrotikUploader GUI v1.0"
        if self.selected_router:
            new_title = f"{base_title} - {self.selected_router.name} ({self.selected_router.ip})"
        else:
            new_title = base_title
        self.root.title(new_title)
    
    def show_window_on_top(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        self.root.attributes('-topmost', True)
        self.root.lift()
        self.root.focus_force()
        
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ topmost
        def remove_topmost():
            self.root.attributes('-topmost', False)
        
        self.root.after(3000, remove_topmost)  # 3000 –º—Å = 3 —Å–µ–∫—É–Ω–¥—ã
    
    def restore_ui_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        if hasattr(self, 'saved_router_index') and self.saved_router_index >= 0:
            if self.saved_router_index < len(self.routers):
                self.selected_router = self.routers[self.saved_router_index]
                # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ
                self.routers_tree.selection_set(str(self.saved_router_index))
                self.routers_tree.focus(str(self.saved_router_index))
                self.update_window_title()
                self.update_router_status()
                self.log_message(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ä–æ—É—Ç–µ—Ä–∞: {self.selected_router.name}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        if hasattr(self, 'saved_column_widths'):
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
            if 'scripts' in self.saved_column_widths:
                scripts_widths = self.saved_column_widths['scripts']
                if 'name' in scripts_widths:
                    self.scripts_tree.column('name', width=scripts_widths['name'])
                if 'size' in scripts_widths:
                    self.scripts_tree.column('size', width=scripts_widths['size'])
            
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —à–µ–¥—É–ª–µ—Ä–æ–≤
            if 'schedulers' in self.saved_column_widths:
                schedulers_widths = self.saved_column_widths['schedulers']
                if 'name' in schedulers_widths:
                    self.schedulers_tree.column('name', width=schedulers_widths['name'])
                if 'status' in schedulers_widths:
                    self.schedulers_tree.column('status', width=schedulers_widths['status'])
                if 'next_run' in schedulers_widths:
                    self.schedulers_tree.column('next_run', width=schedulers_widths['next_run'])
            
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–æ–≤
            if 'files' in self.saved_column_widths:
                files_widths = self.saved_column_widths['files']
                if hasattr(self, 'files_tree'):
                    if 'selected' in files_widths:
                        self.files_tree.column('#0', width=files_widths['selected'])
                    if 'name' in files_widths:
                        self.files_tree.column('name', width=files_widths['name'])
                    if 'size' in files_widths:
                        self.files_tree.column('size', width=files_widths['size'])
                    if 'modified' in files_widths:
                        self.files_tree.column('modified', width=files_widths['modified'])
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
        if hasattr(self, 'saved_window_geometry') and self.saved_window_geometry:
            try:
                self.root.geometry(self.saved_window_geometry)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    
    def sort_treeview(self, tree, col, is_numeric, reverse=False):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ Treeview –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ."""
        data = [(tree.set(child, col), child) for child in tree.get_children('')]
        
        if is_numeric:
            # –ß–∏—Å–ª–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤)
            try:
                data.sort(key=lambda x: int(x[0]) if str(x[0]).isdigit() else 0, reverse=reverse)
            except:
                data.sort(reverse=reverse)
        else:
            # –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            data.sort(key=lambda x: str(x[0]).lower(), reverse=reverse)
        
        # –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for index, (val, child) in enumerate(data):
            tree.move(child, '', index)
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
        next_reverse = not reverse
        if is_numeric:
            tree.heading(col, command=lambda: self.sort_treeview(tree, col, True, next_reverse))
        else:
            tree.heading(col, command=lambda: self.sort_treeview(tree, col, False, next_reverse))
    
    def process_log_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ª–æ–≥–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫."""
        try:
            messages_added = 0
            while messages_added < 10:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
                message = self.log_queue.get_nowait()
                
                self.log_text.config(state=tk.NORMAL)
                self.log_text.insert(tk.END, message)
                self.log_text.see(tk.END)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                line_count = int(self.log_text.index('end-1c').split('.')[0])
                if line_count > self.max_log_lines:
                    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_log_lines
                    lines_to_delete = line_count - self.max_log_lines
                    self.log_text.delete(1.0, f"{lines_to_delete + 1}.0")
                
                self.log_text.config(state=tk.DISABLED)
                messages_added += 1
                
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, self.process_log_queue)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ–¥—É–ª–µ–º (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        module_dir = os.path.dirname(os.path.abspath(__file__))
        settings_file = os.path.join(module_dir, "uploader_settings.json")
        try:
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
                self.routers = [RouterConfig.from_dict(router_data) 
                              for router_data in settings.get('routers', [])]
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É
                self.source_directory = settings.get('source_directory', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.saved_router_index = settings.get('selected_router_index', -1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.saved_column_widths = settings.get('column_widths', {})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞
                self.max_log_lines = settings.get('max_log_lines', 1000)
                self.log_mode = settings.get('log_mode', 'full')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
                self.saved_window_geometry = settings.get('window_geometry', '')
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "ERROR")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ–¥—É–ª–µ–º (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        module_dir = os.path.dirname(os.path.abspath(__file__))
        settings_file = os.path.join(module_dir, "uploader_settings.json")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
            selected_router_index = -1
            if self.selected_router:
                try:
                    selected_router_index = self.routers.index(self.selected_router)
                except ValueError:
                    pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            column_widths = {}
            if hasattr(self, 'scripts_tree'):
                column_widths['scripts'] = {
                    'name': self.scripts_tree.column('name', 'width'),
                    'size': self.scripts_tree.column('size', 'width')
                }
            if hasattr(self, 'schedulers_tree'):
                column_widths['schedulers'] = {
                    'name': self.schedulers_tree.column('name', 'width'),
                    'status': self.schedulers_tree.column('status', 'width'),
                    'next_run': self.schedulers_tree.column('next_run', 'width')
                }
            if hasattr(self, 'files_tree'):
                column_widths['files'] = {
                    'selected': self.files_tree.column('#0', 'width'),
                    'name': self.files_tree.column('name', 'width'),
                    'size': self.files_tree.column('size', 'width'),
                    'modified': self.files_tree.column('modified', 'width')
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            window_geometry = self.root.geometry()
            
            settings = {
                'routers': [router.to_dict() for router in self.routers],
                'source_directory': self.source_directory,
                'selected_router_index': selected_router_index,
                'column_widths': column_widths,
                'window_geometry': window_geometry,
                'max_log_lines': self.max_log_lines,
                'log_mode': self.log_mode
            }
            
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "ERROR")
    
    def refresh_routers_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.routers_tree.get_children():
            self.routers_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        for i, router in enumerate(self.routers):
            self.routers_tree.insert("", tk.END, iid=i, values=(
                router.name, router.ip, router.username, router.port
            ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        self.update_router_status()
    
    def add_router(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        self.edit_router_dialog()
    
    def edit_router(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        self.edit_router_dialog(self.routers[router_index], router_index)
    
    def edit_router_dialog(self, router=None, index=None):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞."""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä" if router is None else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:", "name"),
            ("IP –∞–¥—Ä–µ—Å:", "ip"),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "username"),
            ("–ü–∞—Ä–æ–ª—å:", "password"),
            ("–ü–æ—Ä—Ç:", "port")
        ]
        
        vars = {}
        for i, (label_text, field_name) in enumerate(fields):
            ttk.Label(dialog, text=label_text).grid(row=i, column=0, sticky=tk.W, padx=10, pady=5)
            
            if field_name == "password":
                entry = ttk.Entry(dialog, show="*", width=30)
            else:
                entry = ttk.Entry(dialog, width=30)
            
            entry.grid(row=i, column=1, padx=10, pady=5)
            vars[field_name] = entry
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if router:
                entry.insert(0, str(getattr(router, field_name)))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.grid(row=len(fields), column=0, columnspan=2, pady=20)
        
        def save_router():
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞
                new_router = RouterConfig(
                    name=vars["name"].get().strip(),
                    ip=vars["ip"].get().strip(),
                    username=vars["username"].get().strip(),
                    password=vars["password"].get(),
                    port=int(vars["port"].get() or 8728)
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not all([new_router.name, new_router.ip, new_router.username]):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä
                if index is None:
                    self.routers.append(new_router)
                else:
                    self.routers[index] = new_router
                
                self.refresh_routers_list()
                self.save_settings()
                dialog.destroy()
                
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç")
        
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_router).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def delete_router(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        router = self.routers[router_index]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä '{router.name}'?"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
            if self.selected_router == router:
                self.selected_router = None
                self.update_window_title()
            
            del self.routers[router_index]
            self.refresh_routers_list()
            self.save_settings()
    
    def test_connection(self):
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–æ—É—Ç–µ—Ä–æ–º."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        router = self.routers[router_index]
        
        def test_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = router.ip
                uploader.username = router.username
                uploader.password = router.password
                uploader.port = router.port
                
                uploader.connect()
                success = uploader.login()
                uploader.sock.close()
                
                if success:
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {router.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –Ω–∞ {router.name}"))
                    
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"))
        
        threading.Thread(target=test_thread, daemon=True).start()
    
    def select_router_from_list(self):
        """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –≤ —Å–ø–∏—Å–∫–µ")
            return
        
        router_index = int(selection[0])
        if router_index < len(self.routers):
            self.selected_router = self.routers[router_index]
            self.log_message(f"–í—ã–±—Ä–∞–Ω —Ä–æ—É—Ç–µ—Ä: {self.selected_router.name} ({self.selected_router.ip})")
            self.update_window_title()
            self.update_router_status()
            self.update_upload_info()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ—É—Ç–µ—Ä–∞
            self.auto_load_router_content()
    
    def update_router_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        if self.selected_router:
            status_text = f"‚úÖ {self.selected_router.name} ({self.selected_router.ip})"
            self.active_router_label.config(text=status_text, foreground='green')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ñ–∞–π–ª–æ–≤
            if hasattr(self, 'remote_status_var'):
                self.remote_status_var.set(f"–†–æ—É—Ç–µ—Ä: {self.selected_router.name}")
        else:
            self.active_router_label.config(text="‚ùå –†–æ—É—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground='red')
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ñ–∞–π–ª–æ–≤
            if hasattr(self, 'remote_status_var'):
                self.remote_status_var.set("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
    
    def browse_source_directory(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏."""
        directory = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏",
            initialdir=self.source_directory or os.getcwd()
        )
        
        if directory:
            self.source_directory = directory
            self.source_dir_var.set(directory)
            self.refresh_files_list()
            self.save_settings()
    
    def auto_find_directory(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ CodeNasos."""
        codenosos_dir = find_codenosos_dir()
        if codenosos_dir:
            self.source_directory = codenosos_dir
            self.source_dir_var.set(codenosos_dir)
            self.refresh_files_list()
            self.log_message(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {codenosos_dir}")
        else:
            self.log_message("–ü–∞–ø–∫–∞ CodeNasos –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "WARNING")
    
    def refresh_files_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.files_tree.delete(*self.files_tree.get_children())
        self.file_vars.clear()
        
        if not self.source_directory or not os.path.exists(self.source_directory):
            return
        
        # –ò—â–µ–º .rsc —Ñ–∞–π–ª—ã
        rsc_files = glob.glob(os.path.join(self.source_directory, '*.rsc'))
        
        if not rsc_files:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –¥–µ—Ä–µ–≤–æ
        for file_path in sorted(rsc_files):
            filename = os.path.basename(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                file_size = os.path.getsize(file_path)
            except:
                file_size = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                mod_time = os.path.getmtime(file_path)
                mod_date = datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M')
            except:
                mod_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–±—Ä–∞–Ω)
            item_id = self.files_tree.insert('', 'end', 
                                           text="‚òê",  # –ß–µ–∫–±–æ–∫—Å –Ω–µ –≤—ã–±—Ä–∞–Ω
                                           values=(filename, file_size, mod_date))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
            self.file_vars[item_id] = False
        
        self.update_upload_info()
    
    def select_all_files(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã."""
        for item in self.files_tree.get_children():
            self.files_tree.item(item, text="‚òë")
            self.file_vars[item] = True
        self.update_upload_info()
    
    def deselect_all_files(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."""
        for item in self.files_tree.get_children():
            self.files_tree.item(item, text="‚òê")
            self.file_vars[item] = False
        self.update_upload_info()
    
    def update_upload_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'upload_info_text') or not hasattr(self, 'start_button'):
            return
            
        selected_files = []
        for item_id, is_selected in self.file_vars.items():
            if is_selected:
                values = self.files_tree.item(item_id, 'values')
                if values:
                    selected_files.append(values[0])  # –ò–º—è —Ñ–∞–π–ª–∞
        
        info_text = ""
        if self.selected_router:
            info_text += f"–†–æ—É—Ç–µ—Ä: {self.selected_router.name} ({self.selected_router.ip})\n"
        else:
            info_text += "–†–æ—É—Ç–µ—Ä: –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
        
        info_text += f"–ü–∞–ø–∫–∞: {self.source_directory or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
        info_text += f"–§–∞–π–ª–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {len(selected_files)}\n"
        
        if selected_files:
            info_text += f"–§–∞–π–ª—ã: {', '.join(selected_files[:3])}"
            if len(selected_files) > 3:
                info_text += f" –∏ –µ—â–µ {len(selected_files) - 3}"
        
        self.upload_info_text.config(state=tk.NORMAL)
        self.upload_info_text.delete(1.0, tk.END)
        self.upload_info_text.insert(1.0, info_text)
        self.upload_info_text.config(state=tk.DISABLED)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
        upload_in_progress = (self.upload_thread and self.upload_thread.is_alive())
        can_upload = (self.selected_router and 
                     self.source_directory and 
                     selected_files and 
                     not upload_in_progress)
        
        self.start_button.config(state=tk.NORMAL if can_upload else tk.DISABLED)
    
    def load_router_content(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if not self.selected_router:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
            return
        
        def load_content_thread():
            try:
                self.root.after(0, lambda: self.content_status_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."))
                
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                uploader.connect()
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - 3 —Å–µ–∫—É–Ω–¥—ã  
                uploader.sock.settimeout(3.0)
                
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
                self.root.after(0, lambda: self.content_status_var.set("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤..."))
                uploader.write_sentence(['/system/script/print'])
                
                scripts = []
                while True:
                    reply = uploader.read_sentence()
                    if not reply or reply[0] == '!done':
                        break
                    if reply[0] == '!re':
                        script_name = None
                        script_size = None
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–ø—Ç–µ
                        for item in reply:
                            if item.startswith('=name='):
                                script_name = item[6:]
                            elif item.startswith('=source='):
                                # –ï—Å–ª–∏ –Ω–µ—Ç source-size, –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ source
                                if script_size is None:
                                    script_size = len(item[8:])
                        
                        if script_name:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ (–∏–º—è, —Ä–∞–∑–º–µ—Ä)
                            scripts.append((script_name, script_size or 0))
                
                # –ü–æ–ª—É—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä—ã
                self.root.after(0, lambda: self.content_status_var.set("–ü–æ–ª—É—á–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–æ–≤..."))
                uploader.write_sentence(['/system/scheduler/print'])
                
                schedulers = []
                while True:
                    reply = uploader.read_sentence()
                    if not reply or reply[0] == '!done':
                        break
                    if reply[0] == '!re':
                        scheduler_name = None
                        scheduler_status = None
                        next_run = None
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–µ–¥—É–ª–µ—Ä–µ
                        for item in reply:
                            if item.startswith('=name='):
                                scheduler_name = item[6:]
                            elif item.startswith('=disabled='):
                                scheduler_status = "–æ—Ç–∫–ª—é—á–µ–Ω" if item[10:] == "true" else "–∞–∫—Ç–∏–≤–µ–Ω"
                            elif item.startswith('=next-run='):
                                next_run = item[11:]
                        
                        if scheduler_name:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ (–∏–º—è, —Å—Ç–∞—Ç—É—Å, –≤—Ä–µ–º—è)
                            schedulers.append((scheduler_name, scheduler_status or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", next_run or "-"))
                
                uploader.sock.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                def update_lists():
                    # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
                    for item in self.scripts_tree.get_children():
                        self.scripts_tree.delete(item)
                    
                    for script_name, script_size in sorted(scripts):
                        self.scripts_tree.insert("", tk.END, values=(script_name, script_size))
                    
                    # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —à–µ–¥—É–ª–µ—Ä—ã
                    for item in self.schedulers_tree.get_children():
                        self.schedulers_tree.delete(item)
                    
                    for scheduler_name, status, next_run in sorted(schedulers):
                        self.schedulers_tree.insert("", tk.END, values=(scheduler_name, status, next_run))
                    
                    self.content_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                
                self.root.after(0, update_lists)
                
            except Exception as e:
                self.root.after(0, lambda: self.content_status_var.set(f"–û—à–∏–±–∫–∞: {e}"))
        
        threading.Thread(target=load_content_thread, daemon=True).start()
    
    def start_upload(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.upload_thread and self.upload_thread.is_alive():
            return
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if self.upload_thread and not self.upload_thread.is_alive():
            self.upload_thread = None
        
        self.upload_stop_flag.clear()
        self.upload_thread = threading.Thread(target=self.upload_worker, daemon=True)
        self.upload_thread.start()
        
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
    
    def stop_upload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.upload_stop_flag.set()
        self.log_message("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...", "WARNING")
    
    def upload_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            selected_files = []
            for item_id, is_selected in self.file_vars.items():
                if is_selected:
                    values = self.files_tree.item(item_id, 'values')
                    if values:
                        selected_files.append(values[0])  # –ò–º—è —Ñ–∞–π–ª–∞
            
            total_files = len(selected_files)
            
            self.log_message(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {total_files} —Ñ–∞–π–ª–æ–≤ –Ω–∞ {self.selected_router.name}")
            self.log_message(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_directory}")
            self.log_message(f"üéØ –†–æ—É—Ç–µ—Ä: {self.selected_router.ip}:{self.selected_router.port}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.root.after(0, lambda: self.progress_bar.config(maximum=total_files, value=0))
            self.root.after(0, lambda: self.progress_label.config(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."))
            
            uploaded_count = 0
            failed_count = 0
            
            for i, filename in enumerate(selected_files):
                if self.upload_stop_flag.is_set():
                    self.log_message("‚èπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
                    break
                
                file_path = os.path.join(self.source_directory, filename)
                script_name = filename.replace('.rsc', '')
                
                self.log_message(f"üìÑ [{i+1}/{total_files}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
                self.root.after(0, lambda filename=filename: self.progress_label.config(text=f"–ó–∞–≥—Ä—É–∂–∞–µ–º {filename}..."))
                
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    self.log_message(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
                    try:
                        with codecs.open(file_path, 'r', encoding='utf-8-sig') as f:
                            content = f.read()
                        self.log_message(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ UTF-8, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    except UnicodeDecodeError:
                        self.log_message("‚ö†Ô∏è –û—à–∏–±–∫–∞ UTF-8, –ø—Ä–æ–±—É–µ–º Windows-1251")
                        with codecs.open(file_path, 'r', encoding='windows-1251') as f:
                            content = f.read()
                        self.log_message(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ Windows-1251, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏
                    content_size = len(content.encode('utf-8'))
                    if content_size > 15000:
                        self.log_message(f"üì¶ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({content_size} –±–∞–π—Ç), –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏")
                    else:
                        self.log_message(f"üìÑ –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª ({content_size} –±–∞–π—Ç), –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                    self.log_message(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É")
                    uploader = MikrotikUploader()
                    uploader.router_ip = self.selected_router.ip
                    uploader.username = self.selected_router.username
                    uploader.password = self.selected_router.password
                    uploader.port = self.selected_router.port
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º
                    self.log_message(f"‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞: {script_name}")
                    if uploader.upload_script(script_name, content):
                        uploaded_count += 1
                        self.log_message(f"‚úÖ {filename} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        failed_count += 1
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}", "ERROR")
                
                except Exception as e:
                    failed_count += 1
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}", "ERROR")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, lambda i=i: self.progress_bar.config(value=i+1))
                
                if self.upload_stop_flag.is_set():
                    break
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if not self.upload_stop_flag.is_set():
                self.log_message(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {uploaded_count}, –û—à–∏–±–æ–∫: {failed_count}")
                self.root.after(0, lambda: self.progress_label.config(text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {uploaded_count}/{total_files}"))
            
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", "ERROR")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.upload_thread = None
            self.root.after(0, lambda: self.stop_button.config(state=tk.DISABLED))
            self.root.after(0, self.update_upload_info)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
        if self.upload_thread and self.upload_thread.is_alive():
            self.upload_stop_flag.set()
            self.upload_thread.join(timeout=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.root.destroy()

    def auto_load_router_content(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –±–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤."""
        if not self.selected_router:
            return
        
        def auto_load_thread():
            try:
                self.log_message("üîó –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞", "INFO")
                
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                self.log_message(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.selected_router.ip}:{self.selected_router.port}", "INFO")
                uploader.connect()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - 3 —Å–µ–∫—É–Ω–¥—ã
                uploader.sock.settimeout(3.0)
                self.log_message("‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: 3 —Å–µ–∫", "INFO")
                
                self.log_message(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.selected_router.username}", "INFO")
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                self.log_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "INFO")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —á—Ç–µ–Ω–∏–µ–º
                self.log_message("üìú –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤: /system/script/print", "INFO")
                uploader.write_sentence(['/system/script/print'])
                scripts = []
                scripts_count = 0
                
                while True:
                    try:
                        reply = uploader.read_sentence()
                        if not reply:
                            self.log_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", "INFO")
                            break
                            
                        if reply[0] == '!done':
                            # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –º–∞—Ä–∫–µ—Ä - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
                            self.log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è !done", "INFO")
                            break
                        elif reply[0] == '!re':
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫—Ä–∏–ø—Ç
                            script_info = {'name': '', 'source': ''}
                            for item in reply[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º !re
                                if item.startswith('=name='):
                                    script_info['name'] = item[6:]
                                elif item.startswith('=source='):
                                    script_info['source'] = item[8:]
                            
                            if script_info['name']:
                                scripts.append(script_info)
                                scripts_count += 1
                                self.log_message(f"üìã –°–∫—Ä–∏–ø—Ç {scripts_count}: {script_info['name']} ({len(script_info.get('source', ''))} –±–∞–π—Ç)", "INFO")
                        elif reply[0] == '!trap':
                            # –û—à–∏–±–∫–∞ API - –≤—ã—Ö–æ–¥–∏–º
                            self.log_message(f"‚ùå API Error: {reply}", "ERROR")
                            break
                            
                    except Exception as e:
                        # –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                        if scripts_count > 0:
                            # –ï—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            self.log_message(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {scripts_count} —Å–∫—Ä–∏–ø—Ç–æ–≤", "INFO")
                            break
                        else:
                            raise e
                
                # –ü–æ–ª—É—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                self.log_message("‚è∞ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–æ–≤: /system/scheduler/print", "INFO")
                uploader.write_sentence(['/system/scheduler/print'])
                schedulers = []
                schedulers_count = 0
                
                while True:
                    try:
                        reply = uploader.read_sentence()
                        if not reply:
                            self.log_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —à–µ–¥—É–ª–µ—Ä–æ–≤", "INFO")
                            break
                            
                        if reply[0] == '!done':
                            self.log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤ !done", "INFO")
                            break
                        elif reply[0] == '!re':
                            scheduler_info = {'name': '', 'disabled': 'true', 'next-run': ''}
                            for item in reply[1:]:
                                if item.startswith('=name='):
                                    scheduler_info['name'] = item[6:]
                                elif item.startswith('=disabled='):
                                    scheduler_info['disabled'] = item[10:]
                                elif item.startswith('=next-run='):
                                    scheduler_info['next-run'] = item[11:]
                            
                            if scheduler_info['name']:
                                schedulers.append(scheduler_info)
                                schedulers_count += 1
                                status = "–∞–∫—Ç–∏–≤–µ–Ω" if scheduler_info['disabled'] == 'false' else "–æ—Ç–∫–ª—é—á–µ–Ω"
                                self.log_message(f"‚è∞ –®–µ–¥—É–ª–µ—Ä {schedulers_count}: {scheduler_info['name']} ({status})", "INFO")
                        elif reply[0] == '!trap':
                            self.log_message(f"‚ùå Scheduler API Error: {reply}", "ERROR")
                            break
                            
                    except Exception as e:
                        if schedulers_count > 0:
                            self.log_message(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {schedulers_count}", "INFO")
                            break
                        else:
                            raise e
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self.log_message("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–æ—É—Ç–µ—Ä–æ–º", "INFO")
                uploader.sock.close()
                
                self.log_message(f"üéØ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(scripts)} —Å–∫—Ä–∏–ø—Ç–æ–≤, {len(schedulers)} —à–µ–¥—É–ª–µ—Ä–æ–≤", "INFO")
                
                def update_ui():
                    # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
                    self.scripts_tree.delete(*self.scripts_tree.get_children())
                    for script in scripts:
                        size = f"{len(script.get('source', ''))}"
                        self.scripts_tree.insert('', 'end', values=(script['name'], size))
                    
                    # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —à–µ–¥—É–ª–µ—Ä—ã
                    self.schedulers_tree.delete(*self.schedulers_tree.get_children())
                    for scheduler in schedulers:
                        status = "‚úì" if scheduler.get('disabled') == 'false' else "‚úó"
                        next_run = scheduler.get('next-run', '–Ω–∏–∫–æ–≥–¥–∞')
                        self.schedulers_tree.insert('', 'end', values=(scheduler['name'], status, next_run))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
                    if hasattr(self, 'remote_scripts_tree'):
                        self.remote_scripts_tree.delete(*self.remote_scripts_tree.get_children())
                        for script in scripts:
                            size = f"{len(script.get('source', ''))}"
                            self.remote_scripts_tree.insert('', 'end', values=(script['name'], size))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        self.remote_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, update_ui)
                
            except Exception as e:
                self.log_message(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}", "WARNING")
                
                def update_error_status():
                    if hasattr(self, 'remote_status_var'):
                        self.remote_status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ UI –ø–æ—Ç–æ–∫–µ
                self.root.after(0, update_error_status)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=auto_load_thread, daemon=True).start()

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞."""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)

    def on_log_mode_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ª–æ–≥–∞."""
        self.log_mode = self.log_mode_var.get()
        mode_text = "–ü–æ–ª–Ω—ã–π" if self.log_mode == "full" else "–°–∂–∞—Ç—ã–π"
        self.log_message(f"–ò–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –ª–æ–≥–∞: {mode_text}", "INFO")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    root = tk.Tk()
    app = MikrotikUploaderGUI(root)
    root.mainloop()

if __name__ == '__main__':
    main()