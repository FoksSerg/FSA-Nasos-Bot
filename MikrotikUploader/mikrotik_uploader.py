#!/usr/bin/env python3
import socket
import os
import codecs
import time
import glob
import sys
import re

class MikrotikUploader:
    def __init__(self):
        self.router_ip = "10.10.22.1"
        self.username = "FokinSA"
        self.password = "gjhfvtyznm"
        self.port = 8728
        self.uploaded_count = 0
        self.failed_count = 0
        
    def connect(self):
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.router_ip}...")
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(60)
        self.sock.connect((self.router_ip, self.port))
        
    def write_word(self, word):
        if isinstance(word, bytes):
            data = word
        else:
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–æ–≤
            word = re.sub(r'[^\x00-\x7F]+', '', word)
            data = word.encode("ascii", errors="ignore")
                
        length = len(data)
        if length < 0x80:
            self.sock.send(length.to_bytes(1, byteorder='big'))
        elif length < 0x4000:
            self.sock.send(((length | 0x8000) & 0xFFFF).to_bytes(2, byteorder='big'))
        self.sock.send(data)
        
    def write_sentence(self, words):
        for word in words:
            self.write_word(word)
        self.write_word('')
        
    def read_word(self):
        ret = b''
        length = int.from_bytes(self.sock.recv(1), byteorder='big')
        if length & 0x80:
            length = ((length & 0x7F) << 8) | int.from_bytes(self.sock.recv(1), byteorder='big')
        while length > 0:
            t = self.sock.recv(length)
            ret += t
            length -= len(t)
        
        try:
            return ret.decode("ascii", errors="ignore")
        except UnicodeDecodeError:
            return ret.decode('utf-8', errors='replace')
        
    def read_sentence(self):
        ret = []
        while True:
            word = self.read_word()
            if not word:
                break
            ret.append(word)
        return ret
        
    def login(self):
        print("üîë –í—Ö–æ–¥...")
        self.write_sentence(['/login'])
        self.read_sentence()
        self.write_sentence(['/login', f'=name={self.username}', f'=password={self.password}'])
        reply = self.read_sentence()
        if reply[0] == '!done':
            print("‚úì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {reply}")
            return False

    def verify_script_exists(self, script_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
        self.write_sentence(['/system/script/print', f'?name={script_name}'])
        exists = False
        while True:
            reply = self.read_sentence()
            if not reply:
                break
            if reply[0] == '!re':
                for word in reply:
                    if word.startswith('=name=') and word[6:] == script_name:
                        exists = True
                        break
            elif reply[0] == '!done':
                break
        return exists

    def verify_scheduler_exists(self, scheduler_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞"""
        self.write_sentence(['/system/scheduler/print', f'?name={scheduler_name}'])
        exists = False
        while True:
            reply = self.read_sentence()
            if not reply:
                break
            if reply[0] == '!re':
                for word in reply:
                    if word.startswith('=name=') and word[6:] == scheduler_name:
                        exists = True
                        break
            elif reply[0] == '!done':
                break
        return exists

    def remove_script(self, script_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        self.write_sentence(['/system/script/print', f'?name={script_name}'])
        script_id = None
        while True:
            reply = self.read_sentence()
            if not reply:
                break
            if reply[0] == '!re':
                for word in reply:
                    if word.startswith('=.id='):
                        script_id = word[5:]
                        break
            elif reply[0] == '!done':
                break
        
        if script_id:
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
            self.write_sentence(['/system/script/remove', f'=.id={script_id}'])
            while True:
                reply = self.read_sentence()
                if not reply or reply[0] == '!done':
                    break
            time.sleep(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
            if self.verify_script_exists(script_name):
                print(f"‚ùå –û—à–∏–±–∫–∞: —Å–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
                return False
            return True
        return True  # –°–∫—Ä–∏–ø—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∑–Ω–∞—á–∏—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω

    def remove_scheduler(self, scheduler_name):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if self.verify_scheduler_exists(scheduler_name):
            self.write_sentence(['/system/scheduler/remove', f'=.id=[find name={scheduler_name}]'])
            reply = self.read_sentence()
            time.sleep(1)
            if self.verify_scheduler_exists(scheduler_name):
                print(f"‚ùå –û—à–∏–±–∫–∞: —à–µ–¥—É–ª–µ—Ä {scheduler_name} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω")
                return False
        return True

    def get_mikrotik_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–∏–∫—Ä–æ—Ç–∏–∫–∞"""
        self.write_sentence(['/system/clock/print'])
        clock_data = self.read_sentence()
        
        for line in clock_data:
            if line.startswith('=time='):
                time_str = line[6:]
                try:
                    h, m, s = map(int, time_str.split(':'))
                    # –î–æ–±–∞–≤–ª—è–µ–º 5 —Å–µ–∫—É–Ω–¥
                    s += 5
                    if s >= 60:
                        s -= 60
                        m += 1
                        if m >= 60:
                            m -= 60
                            h += 1
                            if h >= 24:
                                h -= 24
                    return f"{h:02d}:{m:02d}:{s:02d}"
                except ValueError:
                    break
        return None
    
    def upload_script(self, script_name, content):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if len(content) > 15000 and not script_name.endswith(('-TEMP1', '-TEMP2', '-Combine')):
            return self.upload_large_script(script_name, content)
        
        sock = None
        try:
            print(f"\nüì§ {script_name} ({len(content)} –±–∞–π—Ç)...")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(60)
            sock.connect((self.router_ip, self.port))
            self.sock = sock
            
            if not self.login():
                return False
    
            time.sleep(2)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if not self.remove_script(script_name):
                return False
            
            content = content.replace('\r\n', '\n').replace('\r', '\n')
            
            # –ó–∞–≥—Ä—É–∑–∫–∞
            self.write_sentence([
                '/system/script/add',
                f'=name={script_name}',
                f'=source={content}',
                '=policy=read,write,policy,test'
            ])
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ !done
            success = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    success = True
                    break
                elif reply[0] == '!trap':
                    print(f"‚ùå –û—à–∏–±–∫–∞: {reply}")
                    return False
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if self.verify_script_exists(script_name):
                    print(f"‚úÖ {script_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
                    self.uploaded_count += 1
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: —Å–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                    self.failed_count += 1
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {script_name}: –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç !done")
                self.failed_count += 1
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {script_name}: {e}")
            self.failed_count += 1
            return False
        finally:
            if sock:
                sock.close()
            time.sleep(3)

    def upload_large_script(self, script_name, content):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ —à–µ–¥—É–ª–µ—Ä"""
        print(f"\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ {script_name} ({len(content)} –±–∞–π—Ç)")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(60)
            sock.connect((self.router_ip, self.port))
            self.sock = sock
            
            if not self.login():
                return False
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 15KB
            parts = []
            chunk_size = 15000
            for i in range(0, len(content), chunk_size):
                parts.append(content[i:i + chunk_size])
            
            print(f"üìë –†–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–∏")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
            for i, part in enumerate(parts, 1):
                temp_name = f"{script_name}-TEMP{i}"
                print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ {i}/{len(parts)}: {temp_name}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                if not self.remove_script(temp_name):
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç {temp_name}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏
                self.write_sentence([
                    '/system/script/add',
                    f'=name={temp_name}',
                    f'=source={part}',
                    '=policy=read,write,policy,test'
                ])
                
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ !done
                success = False
                while True:
                    reply = self.read_sentence()
                    if not reply:
                        break
                    if reply[0] == '!done':
                        success = True
                        break
                    elif reply[0] == '!trap':
                        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ {i}: {reply}")
                
                if not success:
                    raise Exception(f"–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç !done –¥–ª—è —á–∞—Å—Ç–∏ {i}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
                if not self.verify_script_exists(temp_name):
                    raise Exception(f"–ß–∞—Å—Ç—å {temp_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                
                print(f"‚úÖ {temp_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
                time.sleep(2)
                
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
            print("\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π...")
            combine_script = f"""
# –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}
:local content ""

# –ß–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            for i in range(1, len(parts) + 1):
                combine_script += f"""
:local part{i} [/system script get {script_name}-TEMP{i} source]
:set content ($content . $part{i})
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫—É
            combine_script += f"""
# –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
/system script add name="{script_name}" source=$content policy=read,write,policy,test

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            for i in range(1, len(parts) + 1):
                combine_script += f'/system script remove [find name="{script_name}-TEMP{i}"]\n'
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("\nüìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ combine —Å–∫—Ä–∏–ø—Ç–∞:")
            print(combine_script)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
            combine_name = f"{script_name}-Combine"
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ {combine_name}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π combine —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if not self.remove_script(combine_name):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Å–∫—Ä–∏–ø—Ç {combine_name}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ combine —Å–∫—Ä–∏–ø—Ç–∞
            self.write_sentence([
                '/system/script/add',
                f'=name={combine_name}',
                f'=source={combine_script}',
                '=policy=read,write,policy,test'
            ])
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ !done
            success = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    success = True
                    break
                elif reply[0] == '!trap':
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: {reply}")
            
            if not success:
                raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç !done –¥–ª—è –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ combine —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω
            if not self.verify_script_exists(combine_name):
                raise Exception(f"–°–∫—Ä–∏–ø—Ç {combine_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            
            print(f"‚úÖ {combine_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞ –¥–ª—è —à–µ–¥—É–ª–µ—Ä–∞
            start_time = self.get_mikrotik_time()
            if not start_time:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –º–∏–∫—Ä–æ—Ç–∏–∫–∞")
            
            # –°–æ–∑–¥–∞–µ–º —à–µ–¥—É–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ combine —Å–∫—Ä–∏–ø—Ç–∞
            scheduler_name = f"run-{script_name}-combine"
            print(f"‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ {scheduler_name} –Ω–∞ {start_time}...")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —à–µ–¥—É–ª–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if not self.remove_scheduler(scheduler_name):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —à–µ–¥—É–ª–µ—Ä {scheduler_name}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–µ–¥—É–ª–µ—Ä
            self.write_sentence([
                '/system/scheduler/add',
                f'=name={scheduler_name}',
                f'=on-event=/system script run {script_name}-Combine; :delay 2s; /system script remove {script_name}-Combine; /system scheduler remove {scheduler_name}',
                f'=start-time={start_time}',
                '=interval=0s',
                '=policy=read,write,policy,test'
            ])
            
            # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
            success = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    success = True
                    break
                elif reply[0] == '!trap':
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞: {reply}")
            
            if not success:
                raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç !done –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–µ–¥—É–ª–µ—Ä–∞")
            
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
            time.sleep(30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 30 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω
            if not self.verify_script_exists(script_name):
                raise Exception(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            
            print(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!")
            self.uploaded_count += 1
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.failed_count += 1
            return False
        finally:
            if 'sock' in locals():
                sock.close()
            time.sleep(3)
    
    def list_scripts(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã."""
        try:
            self.connect()
            if not self.login():
                return
        
            self.write_sentence(['/system/script/print'])
            
            nasos_scripts = []
            while True:
                reply = self.read_sentence()
                if not reply or reply[0] == '!done':
                    break
                
                if reply[0] == '!re':
                    for item in reply:
                        if item.startswith('=name='):
                            script_name = item[6:]
                            if script_name.startswith('Nasos-'):
                                nasos_scripts.append(script_name)
            
            print(f"\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ Nasos —Å–∫—Ä–∏–ø—Ç–æ–≤: {len(nasos_scripts)}")
            for script in sorted(nasos_scripts):
                print(f"  ‚Ä¢ {script}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.sock.close()

    def upload_modules(self, module_names=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π."""
        script_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'CodeNasos')
        
        if module_names is None:
            # –í—Å–µ .rsc —Ñ–∞–π–ª—ã
            rsc_files = glob.glob(os.path.join(script_dir, '*.rsc'))
        else:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
            rsc_files = []
            for name in module_names:
                if not name.endswith('.rsc'):
                    name += '.rsc'
                file_path = os.path.join(script_dir, name)
                if os.path.exists(file_path):
                    rsc_files.append(file_path)
                else:
                    print(f"‚ùå –§–∞–π–ª {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not rsc_files:
            print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
            
        print(f"üìã –ö –∑–∞–≥—Ä—É–∑–∫–µ: {len(rsc_files)} –º–æ–¥—É–ª–µ–π")
        
        self.uploaded_count = 0
        self.failed_count = 0
        
        for i, file_path in enumerate(sorted(rsc_files), 1):
            try:
                filename = os.path.basename(file_path)
                script_name = filename.replace('.rsc', '')
                
                print(f"[{i}/{len(rsc_files)}] {filename}")
                
                try:
                    with codecs.open(file_path, 'r', encoding='utf-8-sig') as f:
                        content = f.read()
                except UnicodeDecodeError:
                    with codecs.open(file_path, 'r', encoding='windows-1251') as f:
                        content = f.read()
                
                self.upload_script(script_name, content)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {filename}: {e}")
                self.failed_count += 1
        
        print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {self.uploaded_count}, –û—à–∏–±–æ–∫: {self.failed_count}")

def main():
    uploader = MikrotikUploader()
    
    if len(sys.argv) == 1:
        # –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ
        print("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π NasosRunner")
        uploader.upload_modules()
    elif sys.argv[1] == 'list':
        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
            uploader.list_scripts()
    else:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
        modules = sys.argv[1:]
        print(f"üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π: {', '.join(modules)}")
        uploader.upload_modules(modules)

if __name__ == '__main__':
    main()
