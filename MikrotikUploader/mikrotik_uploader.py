#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MikroTik Router Uploader
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π RouterOS –≤ MikroTik —á–µ—Ä–µ–∑ SSH/SFTP

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- pip install paramiko

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python3 mikrotik_uploader.py
"""

import os
import sys
import json
import time
import getpass
import argparse
from pathlib import Path
import paramiko
from paramiko import SSHClient, SFTPClient

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class MikroTikUploader:
    def __init__(self, config_file='mikrotik_config.json'):
        self.config_file = config_file
        self.config = self.load_config()
        self.ssh_client = None
        self.sftp_client = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            "router_ip": "",
            "username": "admin",
            "password": "",
            "port": 22,
            "source_dir": "CodeNasos",  # –ë—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            "remote_upload_dir": "/",
            "modules": [
                "Nasos-Runner.rsc",
                "Nasos-Telegram.rsc", 
                "Nasos-Messages.rsc",
                "Nasos-TG-Activator.rsc",
                "Nasos-TG-Poller.rsc",
                "Nasos-TG-SendKeyboard.rsc",
                "Nasos-TG-MenuSet.rsc",
                "Nasos-TimeUtils.rsc",
                "Nasos-TG-SendReplyKeyboard.rsc",
                "Nasos-WatchDog.rsc",
                "Nasos-Startup.rsc",
                "Nasos-TG-MenuClear.rsc",
                "Nasos-TG-SendMessage.rsc"
            ]
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return {**default_config, **json.load(f)}
            except Exception as e:
                print(f"{Colors.YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}{Colors.END}")
                return default_config
        else:
            return default_config
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}{Colors.END}")
    
    def setup_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print(f"{Colors.CYAN}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MikroTik{Colors.END}")
        
        try:
            # IP –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞
            if not self.config["router_ip"]:
                self.config["router_ip"] = input("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å MikroTik —Ä–æ—É—Ç–µ—Ä–∞: ").strip()
            else:
                new_ip = input(f"IP –∞–¥—Ä–µ—Å [{self.config['router_ip']}]: ").strip()
                if new_ip:
                    self.config["router_ip"] = new_ip
            
            # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            new_username = input(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [{self.config['username']}]: ").strip()
            if new_username:
                self.config["username"] = new_username
            
            # –ü–∞—Ä–æ–ª—å
            if not self.config["password"]:
                self.config["password"] = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            else:
                if input("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å? (y/N): ").lower() == 'y':
                    self.config["password"] = getpass.getpass("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
            
            # –ü–æ—Ä—Ç SSH
            new_port = input(f"–ü–æ—Ä—Ç SSH [{self.config['port']}]: ").strip()
            if new_port:
                try:
                    self.config["port"] = int(new_port)
                except ValueError:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {self.config['port']}{Colors.END}")
            
            self.save_config()
            print(f"{Colors.GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã{Colors.END}")
            
        except EOFError:
            print(f"\n{Colors.YELLOW}‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
            sys.exit(0)
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
            sys.exit(0)
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MikroTik —á–µ—Ä–µ–∑ SSH"""
        try:
            print(f"{Colors.BLUE}üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.config['router_ip']}:{self.config['port']}...{Colors.END}")
            
            self.ssh_client = SSHClient()
            self.ssh_client.load_system_host_keys()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º WarningPolicy –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.ssh_client.set_missing_host_key_policy(paramiko.WarningPolicy())
            
            self.ssh_client.connect(
                hostname=self.config['router_ip'],
                port=self.config['port'],
                username=self.config['username'],
                password=self.config['password'],
                timeout=10,
                allow_agent=False,  # –û—Ç–∫–ª—é—á–∞–µ–º SSH –∞–≥–µ–Ω—Ç
                look_for_keys=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–π
            )
            
            self.sftp_client = self.ssh_client.open_sftp()
            print(f"{Colors.GREEN}‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ{Colors.END}")
            return True
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}{Colors.END}")
            self.disconnect()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MikroTik"""
        try:
            if self.sftp_client:
                try:
                    self.sftp_client.close()
                except:
                    pass
                self.sftp_client = None
                
            if self.ssh_client:
                try:
                    for session in self.ssh_client._transport.getpeername():
                        try:
                            session.close()
                        except:
                            pass
                    self.ssh_client.close()
                except:
                    pass
                self.ssh_client = None
                
            print(f"{Colors.BLUE}üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MikroTik{Colors.END}")
        except Exception as e:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {e}{Colors.END}")
    
    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ MikroTik"""
        try:
            if not self.ssh_client or not self.ssh_client.get_transport() or not self.ssh_client.get_transport().is_active():
                print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MikroTik...{Colors.END}")
                if not self.connect():
                    return False, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                    
            stdin, stdout, stderr = self.ssh_client.exec_command(command, timeout=30)
            result = stdout.read().decode('utf-8').strip()
            error = stderr.read().decode('utf-8').strip()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
            stdin.close()
            stdout.close()
            stderr.close()
            
            if error:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {error}{Colors.END}")
                return False, error
            
            return True, result
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ SSH –∫–æ–º–∞–Ω–¥—ã: {e}{Colors.END}")
            self.disconnect()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False, str(e)
    
    def upload_file(self, local_path, remote_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SFTP"""
        try:
            self.sftp_client.put(local_path, remote_path)
            return True
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}{Colors.END}")
            return False
    
    def create_script_from_file(self, script_name, local_file_path):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –≤ RouterOS –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(local_file_path, 'r', encoding='utf-8') as f:
                script_content = f.read()
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è RouterOS
            script_content = script_content.replace('\\', '\\\\')
            script_content = script_content.replace('"', '\\"')
            script_content = script_content.replace('\n', '\\n')
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            command = f'/system script add name="{script_name}" source="{script_content}"'
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            delete_cmd = f'/system script remove [find name="{script_name}"]'
            self.execute_command(delete_cmd)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
            success, result = self.execute_command(command)
            return success
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}{Colors.END}")
            return False
    
    def get_available_modules(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        source_dir = Path(self.config['source_dir'])
        if not source_dir.exists():
            print(f"{Colors.RED}‚ùå –ü–∞–ø–∫–∞ {source_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.END}")
            return []
        
        modules = []
        for file_path in source_dir.glob('Nasos-*.rsc'):
            file_size = file_path.stat().st_size
            modules.append({
                'name': file_path.name,
                'path': str(file_path),
                'size': file_size,
                'size_kb': f"{file_size/1024:.1f} KB"
            })
        
        return sorted(modules, key=lambda x: x['name'])
    
    def show_modules_menu(self, modules):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª–µ–π"""
        print(f"\n{Colors.CYAN}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:{Colors.END}")
        print(f"{'‚Ññ':>3} {'–ú–æ–¥—É–ª—å':<35} {'–†–∞–∑–º–µ—Ä':>10}")
        print("-" * 50)
        
        for i, module in enumerate(modules, 1):
            print(f"{i:>3} {module['name']:<35} {module['size_kb']:>10}")
        
        print(f"\n{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:{Colors.END}")
        print("- –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 3 5)")
        print("- –í–≤–µ–¥–∏—Ç–µ 'all' –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π")
        print("- –í–≤–µ–¥–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        try:
            return input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        except (EOFError, KeyboardInterrupt):
            return "q"
    
    def upload_selected_modules(self, selected_modules):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        if not selected_modules:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã{Colors.END}")
            return
        
        print(f"\n{Colors.BLUE}üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É {len(selected_modules)} –º–æ–¥—É–ª–µ–π...{Colors.END}")
        
        success_count = 0
        fail_count = 0
        
        for i, module in enumerate(selected_modules, 1):
            script_name = module['name'].replace('.rsc', '')
            print(f"\n[{i}/{len(selected_modules)}] {Colors.CYAN}üì§ –ó–∞–≥—Ä—É–∂–∞—é {module['name']}...{Colors.END}")
            
            if self.create_script_from_file(script_name, module['path']):
                print(f"{Colors.GREEN}‚úÖ {module['name']} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ{Colors.END}")
                success_count += 1
            else:
                print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module['name']}{Colors.END}")
                fail_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            time.sleep(0.5)
        
        print(f"\n{Colors.BOLD}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}{Colors.END}")
        if fail_count > 0:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–æ–∫: {fail_count}{Colors.END}")
        
        return success_count, fail_count
    
    def list_scripts(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ RouterOS"""
        print(f"\n{Colors.BLUE}üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏–∑ RouterOS...{Colors.END}")
        success, result = self.execute_command('/system script print brief')
        
        if success:
            print(f"\n{Colors.CYAN}–°–∫—Ä–∏–ø—Ç—ã –≤ RouterOS:{Colors.END}")
            print(result)
        else:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤{Colors.END}")
    
    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print(f"{Colors.BOLD}{Colors.CYAN}")
        print("=" * 60)
        print("ü§ñ MikroTik Module Uploader")
        print("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π RouterOS")
        print("=" * 60)
        print(f"{Colors.END}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.setup_connection()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.connect():
            return 1
        
        try:
            while True:
                modules = self.get_available_modules()
                if not modules:
                    print(f"{Colors.RED}‚ùå –ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {self.config['source_dir']}{Colors.END}")
                    break
                
                choice = self.show_modules_menu(modules)
                
                if choice.lower() == 'q':
                    break
                elif choice.lower() == 'all':
                    selected_modules = modules
                else:
                    try:
                        indices = [int(x) - 1 for x in choice.split()]
                        selected_modules = [modules[i] for i in indices if 0 <= i < len(modules)]
                    except (ValueError, IndexError):
                        print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.END}")
                        continue
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
                success_count, fail_count = self.upload_selected_modules(selected_modules)
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã
                if success_count > 0:
                    try:
                        show_scripts = input(f"\n{Colors.YELLOW}–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ RouterOS? (Y/n): {Colors.END}").strip()
                        if show_scripts.lower() != 'n':
                            self.list_scripts()
                    except (EOFError, KeyboardInterrupt):
                        break
                
                # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
                try:
                    continue_upload = input(f"\n{Colors.YELLOW}–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –º–æ–¥—É–ª–∏? (y/N): {Colors.END}").strip()
                    if continue_upload.lower() != 'y':
                        break
                except (EOFError, KeyboardInterrupt):
                    break
                    
        finally:
            self.disconnect()
        
        print(f"\n{Colors.GREEN}üéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.END}")
        return 0

def main():
    parser = argparse.ArgumentParser(
        description='MikroTik Module Uploader - –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π RouterOS —á–µ—Ä–µ–∑ SSH',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('--config', '-c', 
                       default='mikrotik_config.json',
                       help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: mikrotik_config.json)')
    
    parser.add_argument('--batch', '-b',
                       action='store_true',
                       help='Batch —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é')
    
    parser.add_argument('--list-scripts', '-l',
                       action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ RouterOS')
    
    args = parser.parse_args()
    
    uploader = MikroTikUploader(args.config)
    
    if args.batch:
        # Batch —Ä–µ–∂–∏–º
        if not uploader.connect():
            return 1
        
        try:
            modules = uploader.get_available_modules()
            success_count, fail_count = uploader.upload_selected_modules(modules)
            
            if args.list_scripts and success_count > 0:
                uploader.list_scripts()
                
        finally:
            uploader.disconnect()
        
        return 0 if fail_count == 0 else 1
    
    elif args.list_scripts:
        # –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã
        if not uploader.connect():
            return 1
        
        try:
            uploader.list_scripts()
        finally:
            uploader.disconnect()
        
        return 0
    
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        return uploader.run_interactive()

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
        sys.exit(1)
    except Exception as e:
        print(f"{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}")
        sys.exit(1) 