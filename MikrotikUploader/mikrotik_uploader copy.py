#!/usr/bin/env python3
"""
MikrotikUploader GUI - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ RouterOS

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ä–æ—É—Ç–µ—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ (—Å–∫—Ä–∏–ø—Ç—ã, —à–µ–¥—É–ª–µ—Ä—ã)
- –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ –∏ –æ—Ç–º–µ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏

–ê–≤—Ç–æ—Ä: NasosRunner Project
–í–µ—Ä—Å–∏—è: 1.0
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
import os
import threading
import queue
import codecs
import glob
from datetime import datetime
import socket   # –î–ª—è TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
import time     # –î–ª—è –ø–∞—É–∑ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
import sys      # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
import re       # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π (–æ—á–∏—Å—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤)

def find_codenosos_dir():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ CodeNasos –Ω–∞—á–∏–Ω–∞—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–æ–¥–Ω–∏–º–∞—è—Å—å –≤–≤–µ—Ä—Ö.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞:
    1. –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ CodeNasos –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    4. –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–æ –∫–æ—Ä–Ω—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º
    
    Returns:
        str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ CodeNasos
        None: –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –º–∞–∫—Å–∏–º—É–º –Ω–∞ 5 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
    for _ in range(5):
        codenosos_path = os.path.join(current_dir, 'CodeNasos')
        if os.path.exists(codenosos_path) and os.path.isdir(codenosos_path):
            return codenosos_path
        
        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        parent_dir = os.path.dirname(current_dir)
        if parent_dir == current_dir:  # –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ—Ä–Ω—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            break
        current_dir = parent_dir
    
    return None

class MikrotikUploader:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ Mikrotik —á–µ—Ä–µ–∑ API –ø—Ä–æ—Ç–æ–∫–æ–ª.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É —á–µ—Ä–µ–∑ API (–ø–æ—Ä—Ç 8728)
    - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —á–µ—Ä–µ–∑ scheduler
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:
    1. –§–∞–π–ª —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 15KB
    2. –ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç (script-TEMP1, script-TEMP2...)
    3. –°–æ–∑–¥–∞–µ—Ç—Å—è combine-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
    4. –ß–µ—Ä–µ–∑ scheduler –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è combine-—Å–∫—Ä–∏–ø—Ç
    5. Combine-—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–æ–≤.
        
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç:
        - IP –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞)
        - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
        - –ü–æ—Ä—Ç API (8728 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç Mikrotik API)
        - –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        """
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É Mikrotik
        self.router_ip = "10.10.55.1"        # IP –∞–¥—Ä–µ—Å —Ä–æ—É—Ç–µ—Ä–∞
        self.username = "FokinSA"             # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API
        self.password = "gjhfvtyznm"          # –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.port = 8728                      # –ü–æ—Ä—Ç API Mikrotik (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        self.uploaded_count = 0               # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.failed_count = 0                 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
        
    def connect(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ TCP —Å–æ–∫–µ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É.
        
        –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
        1. –°–æ–∑–¥–∞–Ω–∏–µ TCP —Å–æ–∫–µ—Ç–∞ –¥–ª—è IPv4
        2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP –∏ –ø–æ—Ä—Ç—É
        
        Raises:
            socket.error: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É
            socket.timeout: –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        """
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.router_ip}...")
        
        # –°–æ–∑–¥–∞–µ–º TCP —Å–æ–∫–µ—Ç –¥–ª—è IPv4 (AF_INET) –∏ –ø–æ—Ç–æ–∫–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª (SOCK_STREAM)
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ–∫–µ—Ç–æ–º
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏
        self.sock.settimeout(60)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ä–æ—É—Ç–µ—Ä—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP –∏ –ø–æ—Ä—Ç—É
        self.sock.connect((self.router_ip, self.port))
        
    def write_word(self, word):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ "—Å–ª–æ–≤–∞" —á–µ—Ä–µ–∑ API –ø—Ä–æ—Ç–æ–∫–æ–ª Mikrotik.
        
        –ü—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω—ã –≤ API Mikrotik:
        - –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ < 128 –±–∞–π—Ç (0x80): –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è 1 –±–∞–π—Ç –¥–ª–∏–Ω—ã
        - –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ < 16384 –±–∞–π—Ç (0x4000): –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è 2 –±–∞–π—Ç–∞ –¥–ª–∏–Ω—ã 
          —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ä—à–∏–º –±–∏—Ç–æ–º (0x8000)
        - –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ
        
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏:
        - –£–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å RouterOS
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ASCII –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
        - RouterOS API —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å ASCII —Å–∏–º–≤–æ–ª–∞–º–∏
        
        Args:
            word (str|bytes): –°–ª–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –±–∞–π—Ç–∞–º–∏.
        
        Note:
            –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª API Mikrotik.
            –ö–∞–∂–¥–æ–µ "—Å–ª–æ–≤–æ" - —ç—Ç–æ –∞—Ç–æ–º–∞—Ä–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ.
        """
        if isinstance(word, bytes):
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –±–∞–π—Ç–∞—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            data = word
        else:
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å RouterOS
            # RouterOS API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Unicode —Å–∏–º–≤–æ–ª—ã
            word = re.sub(r'[^\x00-\x7F]+', '', word)
            
            # –ö–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ ASCII —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
            # errors="ignore" –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
            data = word.encode("ascii", errors="ignore")
                
        length = len(data)
        
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É API Mikrotik
        if length < 0x80:  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ 128 –±–∞–π—Ç
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É –≤ –æ–¥–Ω–æ–º –±–∞–π—Ç–µ (big-endian)
            self.sock.send(length.to_bytes(1, byteorder='big'))
        elif length < 0x4000:  # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ 16384 –±–∞–π—Ç
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç (0x8000) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ 2 –±–∞–π—Ç–∞—Ö
            # –§–æ—Ä–º—É–ª–∞: (–¥–ª–∏–Ω–∞ | 0x8000) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤–æ–π –¥–ª–∏–Ω—ã
            self.sock.send(((length | 0x8000) & 0xFFFF).to_bytes(2, byteorder='big'))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª–∏–Ω—ã
        self.sock.send(data)
        
    def write_sentence(self, words):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" (–∫–æ–º–∞–Ω–¥—ã) —á–µ—Ä–µ–∑ API.
        
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ API Mikrotik - —ç—Ç–æ –ø–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑:
        1. –ö–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/system/script/add")
        2. –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "=name=script_name", "=source=content")
        3. –ü—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∞—Ä–∫–µ—Ä–∞ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        
        –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:
        - ["/login", "=name=admin", "=password=123"] - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        - ["/system/script/print"] - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
        - ["/system/script/add", "=name=test", "=source=:put hello"] - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        
        Args:
            words (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (—Å—Ç—Ä–æ–∫) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        
        Note:
            –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–æ–º.
            –≠—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        for word in words:
            self.write_word(word)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        # –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ API
        self.write_word('')
        
    def read_word(self):
        """
        –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ "—Å–ª–æ–≤–∞" –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞.
        
        –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏–Ω—ã:
        1. –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç –¥–ª–∏–Ω—ã
        2. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç (0x80) - —á–∏—Ç–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–∞–π—Ç
        3. –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª–Ω—É—é –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö
        4. –ß–∏—Ç–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö
        
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–æ–∫:
        - –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ ASCII (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ API)
        - –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ UTF-8 —Å –∑–∞–º–µ–Ω–æ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        - –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ RouterOS
        
        Returns:
            str: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞
            
        Raises:
            socket.error: –ü—Ä–∏ –æ—à–∏–±–∫–µ —á—Ç–µ–Ω–∏—è –∏–∑ —Å–æ–∫–µ—Ç–∞
            
        Note:
            –ú–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ recv(),
            —Ç–∞–∫ –∫–∞–∫ TCP –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç—è–º–∏.
        """
        ret = b''  # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–∞–π—Ç–æ–≤ —Å–ª–æ–≤–∞
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç –¥–ª–∏–Ω—ã (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        length = int.from_bytes(self.sock.recv(1), byteorder='big')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª–∏–Ω—ã
        if length & 0x80:  # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∏—Ç 0x80
            # –î–ª–∏–Ω–∞ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ 2 –±–∞–π—Ç–∞—Ö
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–∞–π—Ç–∞ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ –≤—Ç–æ—Ä—ã–º
            length = ((length & 0x7F) << 8) | int.from_bytes(self.sock.recv(1), byteorder='big')
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ recv)
        while length > 0:
            t = self.sock.recv(length)  # –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã
            ret += t                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –±—É—Ñ–µ—Ä—É
            length -= len(t)            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–∞–π—Ç
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–π—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ASCII (–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ API Mikrotik)
            return ret.decode("ascii", errors="ignore")
        except UnicodeDecodeError:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 —Å –∑–∞–º–µ–Ω–æ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            # errors='replace' –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ '?'
            return ret.decode('utf-8', errors='replace')
        
    def read_sentence(self):
        """
        –ß—Ç–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" (–æ—Ç–≤–µ—Ç–∞) –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞.
        
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–∏—Ç–∞–µ—Ç—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞ (–º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
        
        –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ RouterOS API:
        - !done - –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        - !trap - –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã  
        - !re - —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–æ–≤)
        - !fatal - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (—Ä–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        ["!done"] - –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ["!re", "=name=script1", "=policy=read,write", "!done"] - –¥–∞–Ω–Ω—ã–µ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ["!trap", "=message=syntax error"] - –æ—à–∏–±–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
            
        Note:
            –ú–µ—Ç–æ–¥ –±–ª–æ–∫–∏—Ä—É—é—â–∏–π - –∂–¥–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
        """
        ret = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        
        while True:
            word = self.read_word()  # –ß–∏—Ç–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
            if not word:  # –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                break
            ret.append(word)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            
        return ret
        
    def login(self):
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ —á–µ—Ä–µ–∑ API.
        
        –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API Mikrotik (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π):
        1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        2. –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç (–≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç challenge)
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /login —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª–µ–º
        4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (!done = —É—Å–ø–µ—Ö, !trap = –æ—à–∏–±–∫–∞)
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏:
        - RouterOS 6.43+ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ MD5 challenge)
        - RouterOS 7.x (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        Note:
            –í —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö RouterOS —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è MD5-—Ö–µ—à –æ—Ç –ø–∞—Ä–æ–ª—è –∏ challenge.
            –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—á—É –ø–∞—Ä–æ–ª—è.
        """
        print("üîë –í—Ö–æ–¥...")
        
        # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.write_sentence(['/login'])
        self.read_sentence()  # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å challenge –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
        
        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        # =name= –∏ =password= - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.write_sentence(['/login', f'=name={self.username}', f'=password={self.password}'])
        reply = self.read_sentence()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –æ—Ç–≤–µ—Ç–∞
        if reply[0] == '!done':
            print("‚úì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {reply}")
            return False

    def verify_script_exists(self, script_name):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /system/script/print —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏.
        –§–∏–ª—å—Ç—Ä ?name=script_name –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º,
        —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–∫—Ä–∏–ø—Ç–æ–≤.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏:
        1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—á–∞—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏
        2. –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è !done
        3. –ò—â–µ–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Å—Ç—Ä–æ–∫–∏ —Å =name= –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Args:
            script_name (str): –ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ, False –µ—Å–ª–∏ –Ω–µ—Ç
            
        Note:
            –ú–µ—Ç–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω - –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞, —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞–µ—Ç.
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏
        # ?name=script_name - —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä API –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # =.proplist=.id,name - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –∏–º—è (–∏–∑–±–µ–≥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
        self.write_sentence(['/system/script/print', f'?name={script_name}', '=.proplist=.id,name'])
        
        exists = False  # –§–ª–∞–≥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        while True:
            reply = self.read_sentence()
            if not reply:  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                break
                
            if reply[0] == '!re':  # !re –æ–∑–Ω–∞—á–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–Ω—ã—Ö
                for word in reply:
                    # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–º–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    if word.startswith('=name=') and word[6:] == script_name:
                        exists = True
                        break
            elif reply[0] == '!done':  # –ö–æ–Ω–µ—Ü –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
                break
                
        return exists

    def verify_scheduler_exists(self, scheduler_name):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ.
        
        –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞ verify_script_exists, –Ω–æ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /system/scheduler/print –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
        
        –®–µ–¥—É–ª–µ—Ä—ã –≤ RouterOS:
        - –ü–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        - –ú–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            scheduler_name (str): –ò–º—è —à–µ–¥—É–ª–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —à–µ–¥—É–ª–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
            
        Note:
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤
            –∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
        """
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–≤–æ–¥–∞ —à–µ–¥—É–ª–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–º–µ–Ω–∏
        # =.proplist=.id,name - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –∏–º—è (–∏–∑–±–µ–≥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        self.write_sentence(['/system/scheduler/print', f'?name={scheduler_name}', '=.proplist=.id,name'])
        
        exists = False  # –§–ª–∞–≥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        while True:
            reply = self.read_sentence()
            if not reply:
                break
                
            if reply[0] == '!re':  # –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–∞
                # –ò—â–µ–º –∏–º—è —à–µ–¥—É–ª–µ—Ä–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                for word in reply:
                    if word.startswith('=name=') and word[6:] == scheduler_name:
                        exists = True
                        break
            elif reply[0] == '!done':  # –ö–æ–Ω–µ—Ü –≤—ã–≤–æ–¥–∞
                break
                
        return exists

    def remove_script(self, script_name):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
        
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è:
        1. –ü–æ–ª—É—á–∞–µ–º ID —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ /system/script/print —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        2. –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ ID —á–µ—Ä–µ–∑ /system/script/remove
        3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–∞—É–∑–∞ 1 —Å–µ–∫)
        4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
        5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ID –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏:
        - ID —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        - –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        - –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ RouterOS
        
        Args:
            script_name (str): –ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª,
                  False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                  
        Note:
            –ú–µ—Ç–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω - –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
            –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏".
        """
        # –®–∞–≥ 1: –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
        self.write_sentence(['/system/script/print', f'?name={script_name}', '=.proplist=.id,name'])
        script_id = None  # ID —Å–∫—Ä–∏–ø—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ RouterOS
        
        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID
        while True:
            reply = self.read_sentence()
            if not reply:
                break
                
            if reply[0] == '!re':  # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞
                # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä .id –≤ –æ—Ç–≤–µ—Ç–µ
                for word in reply:
                    if word.startswith('=.id='):
                        script_id = word[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "=.id="
                        break
            elif reply[0] == '!done':
                break
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if script_id:
            # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
            self.write_sentence(['/system/script/remove', f'=.id={script_id}'])
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            while True:
                reply = self.read_sentence()
                if not reply or reply[0] == '!done':
                    break
            
            # –®–∞–≥ 3: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            for attempt in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫ = 10 —Å–µ–∫—É–Ω–¥
                time.sleep(1)
                
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if not self.reconnect_for_fresh_data():
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω
                if not self.verify_script_exists(script_name):
                    if attempt > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ
                        print(f"‚úÖ –°–∫—Ä–∏–ø—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {attempt + 1} —Å–µ–∫—É–Ω–¥")
                    return True
            
            print(f"‚ùå –û—à–∏–±–∫–∞: —Å–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
            return False
            
        # –°–∫—Ä–∏–ø—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        return True

    def remove_scheduler(self, scheduler_name):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
        
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ remove_script):
        1. –ü–æ–ª—É—á–∞–µ–º ID —à–µ–¥—É–ª–µ—Ä–∞ —á–µ—Ä–µ–∑ /system/scheduler/print —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        2. –ï—Å–ª–∏ —à–µ–¥—É–ª–µ—Ä –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ ID —á–µ—Ä–µ–∑ /system/scheduler/remove
        3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–∞—É–∑–∞ 1 —Å–µ–∫)
        4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–µ–¥—É–ª–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
        5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ID –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏:
        - ID —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        - –ò–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        - –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ RouterOS
        
        Args:
            scheduler_name (str): –ò–º—è —à–µ–¥—É–ª–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —à–µ–¥—É–ª–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª,
                  False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                  
        Note:
            –ú–µ—Ç–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω - –µ—Å–ª–∏ —à–µ–¥—É–ª–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
            –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è "–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏".
        """
        # –®–∞–≥ 1: –ò—â–µ–º —à–µ–¥—É–ª–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
        self.write_sentence(['/system/scheduler/print', f'?name={scheduler_name}', '=.proplist=.id,name'])
        scheduler_id = None  # ID —à–µ–¥—É–ª–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ RouterOS
        
        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID
        while True:
            reply = self.read_sentence()
            if not reply:
                break
                
            if reply[0] == '!re':  # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —à–µ–¥—É–ª–µ—Ä–∞
                # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä .id –≤ –æ—Ç–≤–µ—Ç–µ
                for word in reply:
                    if word.startswith('=.id='):
                        scheduler_id = word[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "=.id="
                        break
            elif reply[0] == '!done':
                break
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ —à–µ–¥—É–ª–µ—Ä –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if scheduler_id:
            # –£–¥–∞–ª—è–µ–º —à–µ–¥—É–ª–µ—Ä –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
            self.write_sentence(['/system/scheduler/remove', f'=.id={scheduler_id}'])
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            while True:
                reply = self.read_sentence()
                if not reply or reply[0] == '!done':
                    break
            
            # –®–∞–≥ 3: –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞
            for attempt in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫ = 10 —Å–µ–∫—É–Ω–¥
                time.sleep(1)
                
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if not self.reconnect_for_fresh_data():
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —à–µ–¥—É–ª–µ—Ä —É–¥–∞–ª–µ–Ω
                if not self.verify_scheduler_exists(scheduler_name):
                    if attempt > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –æ–∂–∏–¥–∞–Ω–∏–µ
                        print(f"‚úÖ –®–µ–¥—É–ª–µ—Ä —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ {attempt + 1} —Å–µ–∫—É–Ω–¥")
                    return True
            
            print(f"‚ùå –û—à–∏–±–∫–∞: —à–µ–¥—É–ª–µ—Ä {scheduler_name} –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
            return False
            
        # –®–µ–¥—É–ª–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        return True

    def reconnect_for_fresh_data(self):
        """
        –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ RouterOS –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        –∏ —Å—Ç–∞—Ä–æ–µ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if hasattr(self, 'sock') and self.sock:
                self.sock.close()
                
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.settimeout(60)
            self.sock.connect((self.router_ip, self.port))
            
            return self.login()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def get_mikrotik_time(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /system/clock/print –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—É—Ç–µ—Ä–∞.
        –î–æ–±–∞–≤–ª—è–µ—Ç 5 —Å–µ–∫—É–Ω–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º.
        
        –ó–∞—á–µ–º –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è —Ä–æ—É—Ç–µ—Ä–∞:
        - –®–µ–¥—É–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ—É—Ç–µ—Ä–∞, –Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
        - –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        - –£—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
        
        –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:
        - +5 —Å–µ–∫—É–Ω–¥: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥/–º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        
        Returns:
            str: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–µ–¥—É–ª–µ—Ä–µ
            None: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            
        Example:
            –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–æ—É—Ç–µ—Ä–∞ 14:30:25, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç "14:30:30"
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —á–∞—Å–∞—Ö —Ä–æ—É—Ç–µ—Ä–∞
        self.write_sentence(['/system/clock/print'])
        clock_data = self.read_sentence()
        
        # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        for line in clock_data:
            if line.startswith('=time='):
                time_str = line[6:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "=time="
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
                    h, m, s = map(int, time_str.split(':'))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞ –≤ –±—É–¥—É—â–µ–º
                    s += 5
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    if s >= 60:  # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–∫—É–Ω–¥
                        s -= 60
                        m += 1
                        if m >= 60:  # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–Ω—É—Ç
                            m -= 60
                            h += 1
                            if h >= 24:  # –ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤ (–ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
                                h -= 24
                                
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    return f"{h:02d}:{m:02d}:{s:02d}"
                except ValueError:
                    # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    break
                    
        return None  # –í—Ä–µ–º—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    
    def upload_script(self, script_name, content):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        if len(content) > 15000 and not script_name.endswith(('-TEMP1', '-TEMP2', '-Combine')):
            return self.upload_large_script(script_name, content)
        
        sock = None
        try:
            print(f"\nüì§ {script_name} ({len(content)} –±–∞–π—Ç)...")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(60)
            sock.connect((self.router_ip, self.port))
            self.sock = sock
            
            if not self.login():
                return False
    
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if not self.remove_script(script_name):
                return False
            
            content = content.replace('\r\n', '\n').replace('\r', '\n')
            
            # –ó–∞–≥—Ä—É–∑–∫–∞
            self.write_sentence([
                '/system/script/add',
                f'=name={script_name}',
                f'=source={content}',
                '=policy=read,write,policy,test'
            ])
            
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ !done
            success = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    success = True
                    break
                elif reply[0] == '!trap':
                    print(f"‚ùå –û—à–∏–±–∫–∞: {reply}")
                    return False
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if self.verify_script_exists(script_name):
                    print(f"‚úÖ {script_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
                    self.uploaded_count += 1
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: —Å–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                    self.failed_count += 1
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {script_name}: –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç !done")
                self.failed_count += 1
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {script_name}: {e}")
            self.failed_count += 1
            return False
        finally:
            if sock:
                sock.close()
            time.sleep(1)  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

    def upload_large_script(self, script_name, content):
        """
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    –ó–ê–ì–†–£–ó–ö–ê –ë–û–õ–¨–®–ò–• –°–ö–†–ò–ü–¢–û–í (>15KB)
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        –°–ª–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π RouterOS API –Ω–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.
        
        –ü–†–û–ë–õ–ï–ú–ê:
        RouterOS API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–º–µ—Ä–Ω–æ 16KB.
        –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–∏–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏.
        
        –†–ï–®–ï–ù–ò–ï - –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø:
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ 1. –†–ê–ó–î–ï–õ–ï–ù–ò–ï    ‚îÇ –§–∞–π–ª ‚Üí —á–∞—Å—Ç–∏ –ø–æ 15KB                       ‚îÇ
        ‚îÇ 2. –ó–ê–ì–†–£–ó–ö–ê      ‚îÇ –ß–∞—Å—Ç–∏ ‚Üí –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã (-TEMP1, -TEMP2) ‚îÇ
        ‚îÇ 3. –û–ë–™–ï–î–ò–ù–ò–¢–ï–õ–¨  ‚îÇ –°–æ–∑–¥–∞–Ω–∏–µ combine-—Å–∫—Ä–∏–ø—Ç–∞                   ‚îÇ
        ‚îÇ 4. –ü–õ–ê–ù–ò–†–û–í–©–ò–ö   ‚îÇ Scheduler –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è       ‚îÇ
        ‚îÇ 5. –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï   ‚îÇ Combine —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç           ‚îÇ
        ‚îÇ 6. –û–ß–ò–°–¢–ö–ê       ‚îÇ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞   ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        
        –ü–û–ß–ï–ú–£ –ù–£–ñ–ï–ù SCHEDULER:
        - API –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        - Combine-—Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç API —Å–µ—Å—Å–∏–∏
        - Scheduler –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        
        –°–•–ï–ú–ê –ò–ú–ï–ù–û–í–ê–ù–ò–Ø:
        ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: "MyScript"
        ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: "MyScript-TEMP1", "MyScript-TEMP2", ...
        ‚Ä¢ –û–±—ä–µ–¥–∏–Ω—è—é—â–∏–π —Å–∫—Ä–∏–ø—Ç: "MyScript-Combine"
        ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: "run-MyScript-combine"
        
        Args:
            script_name (str): –ò–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            content (str): –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞ (>15KB)
            
        Returns:
            bool: True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´:
        - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        - –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        """
        print(f"\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ {script_name} ({len(content)} –±–∞–π—Ç)")
        print(f"‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç API - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")
        
        try:
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø ‚ïê‚ïê‚ïê
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –æ—Ç –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(60)
            sock.connect((self.router_ip, self.port))
            self.sock = sock
            
            if not self.login():
                return False
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 2: –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê –ß–ê–°–¢–ò ‚ïê‚ïê‚ïê
            parts = []
            chunk_size = 15000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ (–º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞ API)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
            for start_pos in range(0, len(content), chunk_size):
                end_pos = start_pos + chunk_size
                part_content = content[start_pos:end_pos]
                parts.append(part_content)
            
            print(f"üìë –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π –ø–æ {chunk_size} –±–∞–π—Ç")
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 3: –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ß–ê–°–¢–ï–ô ‚ïê‚ïê‚ïê
            print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(parts)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π...")
            
            for part_index, part_content in enumerate(parts, 1):
                temp_script_name = f"{script_name}-TEMP{part_index}"
                print(f"\n  üìã –ß–∞—Å—Ç—å {part_index}/{len(parts)}: {temp_script_name}")
                print(f"     –†–∞–∑–º–µ—Ä: {len(part_content)} –±–∞–π—Ç")
                
                # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
                if not self.remove_script(temp_script_name):
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π {temp_script_name}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                self.write_sentence([
                    '/system/script/add',
                    f'=name={temp_script_name}',
                    f'=source={part_content}',
                    '=policy=read,write,policy,test'
                ])
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                upload_success = False
                while True:
                    reply = self.read_sentence()
                    if not reply:
                        break
                    if reply[0] == '!done':
                        upload_success = True
                        break
                    elif reply[0] == '!trap':
                        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ {part_index}: {reply}")
                
                if not upload_success:
                    raise Exception(f"–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–∏ {part_index}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏
                if not self.verify_script_exists(temp_script_name):
                    raise Exception(f"–ß–∞—Å—Ç—å {temp_script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                
                print(f"     ‚úÖ {temp_script_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                time.sleep(0.5)  # –ö—Ä–∞—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–î–ò–ù–Ø–Æ–©–ï–ì–û –°–ö–†–ò–ü–¢–ê ‚ïê‚ïê‚ïê
            print(f"\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥ combine-—Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —è–∑—ã–∫–µ RouterOS
            combine_script_code = f"""# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ó–î–ê–ù–ù–´–ô –û–ë–™–ï–î–ò–ù–Ø–Æ–©–ò–ô –°–ö–†–ò–ü–¢
# –°–∫—Ä–∏–ø—Ç: {script_name}
# –ß–∞—Å—Ç–µ–π: {len(parts)}
# –°–æ–∑–¥–∞–Ω: {time.strftime('%Y-%m-%d %H:%M:%S')}
# –°–∏—Å—Ç–µ–º–∞: MikrotikUploader v2.0
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

:local finalContent ""
:local partContent ""

# === –ß–¢–ï–ù–ò–ï –ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –ß–ê–°–¢–ï–ô ===
:log info "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(parts)} —á–∞—Å—Ç–µ–π —Å–∫—Ä–∏–ø—Ç–∞ {script_name}"
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            for part_num in range(1, len(parts) + 1):
                combine_script_code += f"""
# --- –ß—Ç–µ–Ω–∏–µ —á–∞—Å—Ç–∏ {part_num} ---
:log info "–ß–∏—Ç–∞–µ–º —á–∞—Å—Ç—å {part_num}: {script_name}-TEMP{part_num}"
:set partContent [/system script get {script_name}-TEMP{part_num} source]
:set finalContent ($finalContent . $partContent)
:log info "–ß–∞—Å—Ç—å {part_num} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –æ–±—â–µ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            combine_script_code += f"""
# === –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –°–ö–†–ò–ü–¢–ê ===
:log info "–°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: {script_name}"
/system script add name="{script_name}" source=$finalContent policy=read,write,policy,test
:log info "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç {script_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"

# === –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í ===
:log info "–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            for part_num in range(1, len(parts) + 1):
                combine_script_code += f"""
:log info "–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —á–∞—Å—Ç—å: {script_name}-TEMP{part_num}"
/system script remove [find name="{script_name}-TEMP{part_num}"]
"""
            
            combine_script_code += f"""
:log info "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
"""
            
            # –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ combine-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\nüìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:")
            print("‚ïê" * 60)
            print(combine_script_code)
            print("‚ïê" * 60)
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 5: –ó–ê–ì–†–£–ó–ö–ê COMBINE-–°–ö–†–ò–ü–¢–ê ‚ïê‚ïê‚ïê
            combine_script_name = f"{script_name}-Combine"
            print(f"\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–¥–∏–Ω—è—é—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: {combine_script_name}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ combine-—Å–∫—Ä–∏–ø—Ç–∞
            if not self.remove_script(combine_script_name):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π {combine_script_name}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ combine-—Å–∫—Ä–∏–ø—Ç–∞
            self.write_sentence([
                '/system/script/add',
                f'=name={combine_script_name}',
                f'=source={combine_script_code}',
                '=policy=read,write,policy,test'
            ])
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            combine_uploaded = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    combine_uploaded = True
                    break
                elif reply[0] == '!trap':
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ combine-—Å–∫—Ä–∏–ø—Ç–∞: {reply}")
            
            if not combine_uploaded:
                raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ combine-—Å–∫—Ä–∏–ø—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è combine-—Å–∫—Ä–∏–ø—Ç–∞
            if not self.verify_script_exists(combine_script_name):
                raise Exception(f"Combine-—Å–∫—Ä–∏–ø—Ç {combine_script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            
            print(f"‚úÖ {combine_script_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 6: –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ‚ïê‚ïê‚ïê
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            execution_time = self.get_mikrotik_time()
            if not execution_time:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ—É—Ç–µ—Ä–∞")
            
            scheduler_name = f"run-{script_name}-combine"
            print(f"‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ {scheduler_name} –Ω–∞ –≤—Ä–µ–º—è {execution_time}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            if not self.remove_scheduler(scheduler_name):
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ {scheduler_name}")
            
            # –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è):
            # 1. –ó–∞–ø—É—Å–∫ combine-—Å–∫—Ä–∏–ø—Ç–∞
            # 2. –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            # 3. –£–¥–∞–ª–µ–Ω–∏–µ combine-—Å–∫—Ä–∏–ø—Ç–∞ (—Å–∞–º–æ–æ—á–∏—Å—Ç–∫–∞)
            # 4. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ)
            scheduler_command = (
                f"/system script run {script_name}-Combine; "
                f":delay 2s; "
                f"/system script remove {script_name}-Combine; "
                f"/system scheduler remove {scheduler_name}"
            )
            
            print(f"üìã –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {scheduler_command}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            self.write_sentence([
                '/system/scheduler/add',
                f'=name={scheduler_name}',
                f'=on-event={scheduler_command}',
                f'=start-time={execution_time}',
                '=interval=0s',  # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                '=policy=read,write,policy,test'
            ])
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            scheduler_created = False
            while True:
                reply = self.read_sentence()
                if not reply:
                    break
                if reply[0] == '!done':
                    scheduler_created = True
                    break
                elif reply[0] == '!trap':
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {reply}")
            
            if not scheduler_created:
                raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 7: –£–ú–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø ‚ïê‚ïê‚ïê
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
            print(f"   –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ {execution_time}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 60 —Å–µ–∫—É–Ω–¥")
            
            # –ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
            script_created = False
            for attempt in range(60):  # –ú–∞–∫—Å–∏–º—É–º 60 –ø–æ–ø—ã—Ç–æ–∫ = 60 —Å–µ–∫—É–Ω–¥
                time.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                
                # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                if not self.reconnect_for_fresh_data():
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
                if self.verify_script_exists(script_name):
                    print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ {attempt + 1} —Å–µ–∫—É–Ω–¥!")
                    script_created = True
                    break
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if (attempt + 1) % 5 == 0:
                    print(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ({attempt + 1}/60 —Å–µ–∫)")
            
            if not script_created:
                raise Exception(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name} (60 —Å–µ–∫—É–Ω–¥)")
            
            # ‚ïê‚ïê‚ïê –≠–¢–ê–ü 8: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò ‚ïê‚ïê‚ïê
            print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
            for part_num in range(1, len(parts) + 1):
                temp_name = f"{script_name}-TEMP{part_num}"
                if self.verify_script_exists(temp_name):
                    print(f"   ‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç {temp_name} –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç {temp_name} —É–¥–∞–ª–µ–Ω")
            
            combine_name = f"{script_name}-Combine"
            if self.verify_script_exists(combine_name):
                print(f"   ‚ö†Ô∏è  Combine-—Å–∫—Ä–∏–ø—Ç {combine_name} –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚úÖ Combine-—Å–∫—Ä–∏–ø—Ç {combine_name} —É–¥–∞–ª–µ–Ω")
                
            scheduler_name = f"run-{script_name}-combine"
            if self.verify_scheduler_exists(scheduler_name):
                print(f"   ‚ö†Ô∏è  –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ {scheduler_name} –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ {scheduler_name} —É–¥–∞–ª–µ–Ω")
            
            print(f"‚úÖ –ë–æ–ª—å—à–æ–π —Å–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(parts)} —á–∞—Å—Ç–µ–π ‚Üí 1 —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
            
            self.uploaded_count += 1
            return True
            
        except Exception as error:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞:")
            print(f"   {error}")
            print(f"üßπ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            self.failed_count += 1
            return False
        finally:
            # ‚ïê‚ïê‚ïê –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ‚ïê‚ïê‚ïê
            if 'sock' in locals():
                sock.close()
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ —Å–ª–æ–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            time.sleep(1)

class RouterConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    def __init__(self, name="", ip="", username="", password="", port=8728):
        self.name = name
        self.ip = ip
        self.username = username
        self.password = password
        self.port = port
    
    def to_dict(self):
        return {
            'name': self.name,
            'ip': self.ip,
            'username': self.username,
            'password': self.password,
            'port': self.port
        }
    
    @classmethod
    def from_dict(cls, data):
        return cls(
            data.get('name', ''),
            data.get('ip', ''),
            data.get('username', ''),
            data.get('password', ''),
            data.get('port', 8728)
        )

class MikrotikUploaderGUI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, root):
        self.root = root
        self.root.title("MikrotikUploader GUI v2.1.2")
        self.root.geometry("1200x800")
        self.root.minsize(1000, 600)
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.routers = []  # –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.selected_router = None  # –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        self.source_directory = ""  # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
        self.file_vars = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ —Ñ–∞–π–ª–æ–≤
        self.log_queue = queue.Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.saved_router_index = -1
        self.saved_column_widths = {}
        self.saved_window_geometry = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞
        self.max_log_lines = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ
        self.log_mode = "full"  # "full" –∏–ª–∏ "compact"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh_enabled = False
        self.auto_refresh_interval = 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Å–µ–∫)
        self.auto_refresh_timer = None
        self.last_refresh_time = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
        self.process_log_queue()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        self.show_window_on_top()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ñ—Ä–µ–π–º —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–∏–∑—É –°–ù–ê–ß–ê–õ–ê (–Ω—É–∂–µ–Ω –¥–ª—è active_router_label)
        self.create_status_frame()
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=(5, 10))
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_routers_tab()
        self.create_files_tab()
        self.create_content_tab()
        self.create_upload_tab()
    
    def create_routers_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏."""
        routers_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(routers_frame, text="üåê –†–æ—É—Ç–µ—Ä—ã")
        
        # –°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        list_frame = ttk.LabelFrame(routers_frame, text="–°–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤", padding="5")
        list_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Treeview –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        columns = ("name", "ip", "username", "port")
        self.routers_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        self.routers_tree.heading("name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.routers_tree.heading("ip", text="IP –∞–¥—Ä–µ—Å")
        self.routers_tree.heading("username", text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        self.routers_tree.heading("port", text="–ü–æ—Ä—Ç")
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.routers_tree.column("name", width=200)
        self.routers_tree.column("ip", width=150)
        self.routers_tree.column("username", width=120)
        self.routers_tree.column("port", width=80)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar_routers = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.routers_tree.yview)
        self.routers_tree.configure(yscrollcommand=scrollbar_routers.set)
        
        self.routers_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_routers.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.routers_tree.bind("<Double-1>", lambda e: self.select_router_from_list())
        
        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞–º–∏
        buttons_frame = ttk.Frame(routers_frame)
        buttons_frame.grid(row=1, column=0, pady=10)
        
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_router).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üîó –¢–µ—Å—Ç —Å–≤—è–∑–∏", command=self.test_connection).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å", command=self.select_router_from_list).pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ - –£–ë–ò–†–ê–ï–ú, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –æ–±—â–∏–π —Ñ—Ä–µ–π–º —Å—Ç–∞—Ç—É—Å–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
        routers_frame.columnconfigure(0, weight=1)
        routers_frame.rowconfigure(0, weight=1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤
        self.refresh_routers_list()
    
    def create_status_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Ñ—Ä–µ–π–º–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–∏–∑—É —Ñ–æ—Ä–º—ã (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö)."""
        status_main_frame = ttk.LabelFrame(self.root, text="–°—Ç–∞—Ç—É—Å –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", padding="5")
        status_main_frame.pack(fill=tk.X, padx=10, pady=(10, 5), side=tk.BOTTOM)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ—É—Ç–µ—Ä–µ
        router_info_frame = ttk.Frame(status_main_frame)
        router_info_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        ttk.Label(router_info_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä:", font=('Arial', 12, 'bold')).pack(side=tk.LEFT, padx=(0, 5))
        self.active_router_label = ttk.Label(router_info_frame, text="–†–æ—É—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                                           font=('Arial', 12), foreground='red')
        self.active_router_label.pack(side=tk.LEFT, padx=(0, 20))
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        auto_refresh_frame = ttk.Frame(status_main_frame)
        auto_refresh_frame.pack(side=tk.LEFT, padx=(10, 10))
        
        # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.auto_refresh_var = tk.BooleanVar(value=self.auto_refresh_enabled)
        auto_refresh_checkbox = ttk.Checkbutton(auto_refresh_frame, text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                                               variable=self.auto_refresh_var, 
                                               command=self.toggle_auto_refresh)
        auto_refresh_checkbox.pack(side=tk.LEFT, padx=(0, 10))
        
        # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        ttk.Label(auto_refresh_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª:", font=('Arial', 11)).pack(side=tk.LEFT, padx=(0, 5))
        
        self.interval_var = tk.StringVar(value=str(self.auto_refresh_interval))
        interval_combo = ttk.Combobox(auto_refresh_frame, textvariable=self.interval_var, 
                                     values=["1", "3", "10"], width=5, state="readonly")
        interval_combo.pack(side=tk.LEFT, padx=(0, 5))
        interval_combo.bind("<<ComboboxSelected>>", self.on_interval_change)
        
        ttk.Label(auto_refresh_frame, text="—Å–µ–∫", font=('Arial', 11)).pack(side=tk.LEFT, padx=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(auto_refresh_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", 
                  command=self.manual_refresh).pack(side=tk.LEFT, padx=(0, 10))
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_status_frame = ttk.Frame(status_main_frame)
        refresh_status_frame.pack(side=tk.RIGHT)
        
        ttk.Label(refresh_status_frame, text="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", font=('Arial', 11)).pack(side=tk.LEFT, padx=(0, 5))
        self.last_refresh_label = ttk.Label(refresh_status_frame, text="–Ω–∏–∫–æ–≥–¥–∞", 
                                           font=('Arial', 11, 'bold'), foreground='gray')
        self.last_refresh_label.pack(side=tk.LEFT)
    
    def toggle_auto_refresh(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        self.auto_refresh_enabled = self.auto_refresh_var.get()
        
        if self.auto_refresh_enabled:
            if self.selected_router:
                self.log_message(f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.auto_refresh_interval} —Å–µ–∫)", "INFO")
                self.start_auto_refresh()
            else:
                self.log_message("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "WARNING")
                self.auto_refresh_var.set(False)
                self.auto_refresh_enabled = False
        else:
            self.log_message("‚èπÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ", "INFO")
            self.stop_auto_refresh()
        
        self.save_settings()
    
    def on_interval_change(self, event=None):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        try:
            new_interval = int(self.interval_var.get())
            if new_interval != self.auto_refresh_interval:
                self.auto_refresh_interval = new_interval
                self.log_message(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫", "INFO")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –µ—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
                if self.auto_refresh_enabled:
                    self.stop_auto_refresh()
                    self.start_auto_refresh()
                
                self.save_settings()
        except ValueError:
            self.log_message("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "ERROR")
    
    def start_auto_refresh(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        if not self.selected_router:
            return
            
        self.stop_auto_refresh()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        
        def auto_refresh_worker():
            if self.auto_refresh_enabled and self.selected_router:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
                threading.Thread(target=self.auto_load_router_content_silent, daemon=True).start()
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if self.auto_refresh_enabled:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    self.auto_refresh_timer = self.root.after(self.auto_refresh_interval * 1000, auto_refresh_worker)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        auto_refresh_worker()
    
    def stop_auto_refresh(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
        if self.auto_refresh_timer:
            self.root.after_cancel(self.auto_refresh_timer)
            self.auto_refresh_timer = None
    
    def manual_refresh(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–æ—É—Ç–µ—Ä–∞."""
        if not self.selected_router:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
            return
        
        self.log_message("üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–∞", "INFO")
        threading.Thread(target=self.auto_load_router_content, daemon=True).start()
    
    def auto_load_router_content_silent(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if not self.selected_router:
            return
        
        try:
            uploader = MikrotikUploader()
            uploader.router_ip = self.selected_router.ip
            uploader.username = self.selected_router.username
            uploader.password = self.selected_router.password
            uploader.port = self.selected_router.port
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            uploader.connect()
            uploader.sock.settimeout(2.0)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            if not uploader.login():
                raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ë–ï–ó source –ø–æ–ª—è
            uploader.write_sentence(['/system/script/print', '=.proplist=.id,name,owner,run-count'])
            scripts = []
            
            while True:
                try:
                    reply = uploader.read_sentence()
                    if not reply or reply[0] == '!done':
                        break
                    elif reply[0] == '!re':
                        script_info = {'name': '', 'owner': '', 'run-count': '0'}
                        for item in reply[1:]:
                            if item.startswith('=name='):
                                script_info['name'] = item[6:]
                            elif item.startswith('=owner='):
                                script_info['owner'] = item[7:]
                            elif item.startswith('=run-count='):
                                script_info['run-count'] = item[12:]
                        
                        if script_info['name']:
                            scripts.append(script_info)
                    elif reply[0] == '!trap':
                        break
                except:
                    break
            
            # –ü–æ–ª—É—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä—ã
            uploader.write_sentence(['/system/scheduler/print'])
            schedulers = []
            
            while True:
                try:
                    reply = uploader.read_sentence()
                    if not reply or reply[0] == '!done':
                        break
                    elif reply[0] == '!re':
                        scheduler_info = {'name': '', 'disabled': 'true', 'next-run': ''}
                        for item in reply[1:]:
                            if item.startswith('=name='):
                                scheduler_info['name'] = item[6:]
                            elif item.startswith('=disabled='):
                                scheduler_info['disabled'] = item[10:]
                            elif item.startswith('=next-run='):
                                scheduler_info['next-run'] = item[11:]
                        
                        if scheduler_info['name']:
                            schedulers.append(scheduler_info)
                    elif reply[0] == '!trap':
                        break
                except:
                    break
            
            uploader.sock.close()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.last_refresh_time = datetime.now()
            
            def update_ui():
                # –û–±–Ω–æ–≤–ª—è–µ–º UI
                if hasattr(self, 'router_scripts_tree'):
                    self.router_scripts_tree.delete(*self.router_scripts_tree.get_children())
                    for script in scripts:
                        run_count = script.get('run-count', '0')
                        self.router_scripts_tree.insert('', 'end', values=(script['name'], run_count))
                
                if hasattr(self, 'router_schedulers_tree'):
                    self.router_schedulers_tree.delete(*self.router_schedulers_tree.get_children())
                    for scheduler in schedulers:
                        status = "‚úì" if scheduler.get('disabled') == 'false' else "‚úó"
                        next_run = scheduler.get('next-run', '–Ω–∏–∫–æ–≥–¥–∞')
                        self.router_schedulers_tree.insert('', 'end', values=(scheduler['name'], status, next_run))
                
                if hasattr(self, 'remote_scripts_tree'):
                    self.remote_scripts_tree.delete(*self.remote_scripts_tree.get_children())
                    for script in scripts:
                        run_count = script.get('run-count', '0')
                        self.remote_scripts_tree.insert('', 'end', values=(script['name'], run_count))
                    
                    self.remote_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                
                if hasattr(self, 'content_status_var'):
                    self.content_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if hasattr(self, 'last_refresh_label'):
                    time_str = self.last_refresh_time.strftime("%H:%M:%S")
                    self.last_refresh_label.config(text=time_str, foreground='green')
            
            self.root.after(0, update_ui)
            
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            def update_error_status():
                if hasattr(self, 'last_refresh_label'):
                    self.last_refresh_label.config(text="–æ—à–∏–±–∫–∞", foreground='red')
                if hasattr(self, 'remote_status_var'):
                    self.remote_status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                if hasattr(self, 'content_status_var'):
                    self.content_status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            self.root.after(0, update_error_status)
    
    def create_files_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
        files_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(files_frame, text="üìÅ –§–∞–π–ª—ã")
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
        dir_frame = ttk.LabelFrame(files_frame, text="–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏", padding="5")
        dir_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.source_dir_var = tk.StringVar()
        dir_entry = ttk.Entry(dir_frame, textvariable=self.source_dir_var, width=60)
        dir_entry.grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(dir_frame, text="üìÇ –û–±–∑–æ—Ä", command=self.browse_source_directory).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(dir_frame, text="üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫", command=self.auto_find_directory).grid(row=0, column=2)
        
        # –°–æ–∑–¥–∞–µ–º PanedWindow –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        paned_window = ttk.PanedWindow(files_frame, orient=tk.HORIZONTAL)
        paned_window.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        
        # –õ–ï–í–ê–Ø –ß–ê–°–¢–¨: –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        local_frame = ttk.LabelFrame(paned_window, text="–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", padding="5")
        paned_window.add(local_frame, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º —Ñ–∞–π–ª–æ–≤
        file_buttons_frame = ttk.Frame(local_frame)
        file_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(file_buttons_frame, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", command=self.select_all_files).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(file_buttons_frame, text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", command=self.deselect_all_files).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(file_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_files_list).pack(side=tk.LEFT)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
        file_columns = ("name", "size", "modified")
        self.files_tree = ttk.Treeview(local_frame, columns=file_columns, show="headings", height=20, selectmode="extended")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.files_tree.heading("name", text="–ò–º—è —Ñ–∞–π–ª–∞ ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "name", False))
        self.files_tree.heading("size", text="–†–∞–∑–º–µ—Ä (–±–∞–π—Ç) ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "size", True))
        self.files_tree.heading("modified", text="–ò–∑–º–µ–Ω–µ–Ω ‚Üï", command=lambda: self.sort_treeview(self.files_tree, "modified", False))
        
        self.files_tree.column("name", width=250, anchor=tk.W)
        self.files_tree.column("size", width=120, anchor=tk.E)
        self.files_tree.column("modified", width=180, anchor=tk.W)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        self.files_tree.configure(style="Custom.Treeview")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        self.files_tree.bind("<<TreeviewSelect>>", lambda e: self.update_upload_info())
        
        scrollbar_files = ttk.Scrollbar(local_frame, orient=tk.VERTICAL, command=self.files_tree.yview)
        self.files_tree.configure(yscrollcommand=scrollbar_files.set)
        
        self.files_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_files.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        local_frame.columnconfigure(0, weight=1)
        local_frame.rowconfigure(1, weight=1)
        
        
        # –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –§–∞–π–ª—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
        remote_frame = ttk.LabelFrame(paned_window, text="–§–∞–π–ª—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        paned_window.add(remote_frame, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        remote_buttons_frame = ttk.Frame(remote_frame)
        remote_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(remote_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.auto_load_router_content).pack(side=tk.LEFT, padx=(0, 5))
        self.remote_status_var = tk.StringVar(value="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
        ttk.Label(remote_buttons_frame, textvariable=self.remote_status_var).pack(side=tk.LEFT)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ (—Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç—ã)
        remote_columns = ("name", "size")
        self.remote_scripts_tree = ttk.Treeview(remote_frame, columns=remote_columns, show="headings", height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.remote_scripts_tree.heading("name", text="–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ ‚Üï", command=lambda: self.sort_treeview(self.remote_scripts_tree, "name", False))
        self.remote_scripts_tree.heading("size", text="–†–∞–∑–º–µ—Ä (–±–∞–π—Ç) ‚Üï", command=lambda: self.sort_treeview(self.remote_scripts_tree, "size", True))
        
        self.remote_scripts_tree.column("name", width=250, anchor=tk.W)
        self.remote_scripts_tree.column("size", width=120, anchor=tk.E)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        self.remote_scripts_tree.configure(style="Custom.Treeview")
        
        scrollbar_remote = ttk.Scrollbar(remote_frame, orient=tk.VERTICAL, command=self.remote_scripts_tree.yview)
        self.remote_scripts_tree.configure(yscrollcommand=scrollbar_remote.set)
        
        self.remote_scripts_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_remote.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        remote_frame.columnconfigure(0, weight=1)
        remote_frame.rowconfigure(1, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        files_frame.columnconfigure(0, weight=1)
        files_frame.rowconfigure(1, weight=1)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    

    
    def create_content_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        content_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(content_frame, text="üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        connect_frame = ttk.Frame(content_frame)
        connect_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Button(connect_frame, text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.auto_load_router_content).pack(side=tk.LEFT, padx=(0, 10))
        
        self.content_status_var = tk.StringVar(value="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        ttk.Label(connect_frame, textvariable=self.content_status_var).pack(side=tk.LEFT)
        
        # –ì–ª–∞–≤–Ω—ã–π PanedWindow - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (—Å–∫—Ä–∏–ø—Ç—ã | –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å)
        main_paned = ttk.PanedWindow(content_frame, orient=tk.HORIZONTAL)
        main_paned.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –õ–ï–í–ê–Ø –ß–ê–°–¢–¨: –°–∫—Ä–∏–ø—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        scripts_main_frame = ttk.Frame(main_paned)
        main_paned.add(scripts_main_frame, weight=1)
        
        scripts_frame = ttk.LabelFrame(scripts_main_frame, text="–°–∫—Ä–∏–ø—Ç—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        scripts_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        scripts_buttons_frame = ttk.Frame(scripts_frame)
        scripts_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(scripts_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_router_scripts).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(scripts_buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", 
                  command=self.delete_selected_scripts).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
        script_columns = ("name", "size")
        self.router_scripts_tree = ttk.Treeview(scripts_frame, columns=script_columns, 
                                               show="headings", height=20, selectmode="extended")
        
        self.router_scripts_tree.heading("name", text="–ò–º—è —Å–∫—Ä–∏–ø—Ç–∞ ‚Üï", 
                                         command=lambda: self.sort_treeview(self.router_scripts_tree, "name", False))
        self.router_scripts_tree.heading("size", text="–ó–∞–ø—É—Å–∫–∏ ‚Üï",
                                         command=lambda: self.sort_treeview(self.router_scripts_tree, "size", True))
        
        self.router_scripts_tree.column("name", width=280, anchor=tk.W)
        self.router_scripts_tree.column("size", width=100, anchor=tk.E)
        
        style = ttk.Style()
        style.configure("Custom.Treeview", font=('Arial', 12), rowheight=22)
        style.configure("Custom.Treeview.Heading", font=('Arial', 11, 'bold'))
        self.router_scripts_tree.configure(style="Custom.Treeview")
        
        scrollbar_router_scripts = ttk.Scrollbar(scripts_frame, orient=tk.VERTICAL, 
                                                command=self.router_scripts_tree.yview)
        self.router_scripts_tree.configure(yscrollcommand=scrollbar_router_scripts.set)
        
        self.router_scripts_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_router_scripts.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        scripts_frame.columnconfigure(0, weight=1)
        scripts_frame.rowconfigure(1, weight=1)
        scripts_main_frame.columnconfigure(0, weight=1)
        scripts_main_frame.rowconfigure(0, weight=1)
        
        # –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π PanedWindow –¥–ª—è —à–µ–¥—É–ª–µ—Ä–æ–≤ –∏ –∑–∞–¥–∞—á
        right_paned = ttk.PanedWindow(main_paned, orient=tk.VERTICAL)
        main_paned.add(right_paned, weight=1)
        
        # –®–ï–î–£–õ–ï–†–´ (–≤–µ—Ä—Ö–Ω—è—è –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å)
        schedulers_main_frame = ttk.Frame(right_paned)
        right_paned.add(schedulers_main_frame, weight=1)
        
        schedulers_frame = ttk.LabelFrame(schedulers_main_frame, text="–®–µ–¥—É–ª–µ—Ä—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        schedulers_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞–º–∏
        schedulers_buttons_frame = ttk.Frame(schedulers_frame)
        schedulers_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(schedulers_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_router_schedulers).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(schedulers_buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                  command=self.delete_selected_schedulers).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(schedulers_buttons_frame, text="‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", 
                  command=self.enable_selected_schedulers).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(schedulers_buttons_frame, text="‚è∏Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å", 
                  command=self.disable_selected_schedulers).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ —à–µ–¥—É–ª–µ—Ä–æ–≤
        scheduler_columns = ("name", "status", "next_run")
        self.router_schedulers_tree = ttk.Treeview(schedulers_frame, columns=scheduler_columns, 
                                                  show="headings", height=10, selectmode="extended")
        
        self.router_schedulers_tree.heading("name", text="–ò–º—è ‚Üï", 
                                           command=lambda: self.sort_treeview(self.router_schedulers_tree, "name", False))
        self.router_schedulers_tree.heading("status", text="–°—Ç–∞—Ç—É—Å ‚Üï", 
                                           command=lambda: self.sort_treeview(self.router_schedulers_tree, "status", False))
        self.router_schedulers_tree.heading("next_run", text="–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ ‚Üï", 
                                           command=lambda: self.sort_treeview(self.router_schedulers_tree, "next_run", False))
        
        self.router_schedulers_tree.column("name", width=180, anchor=tk.W)
        self.router_schedulers_tree.column("status", width=60, anchor=tk.CENTER)
        self.router_schedulers_tree.column("next_run", width=120, anchor=tk.W)
        
        self.router_schedulers_tree.configure(style="Custom.Treeview")
        
        scrollbar_router_schedulers = ttk.Scrollbar(schedulers_frame, orient=tk.VERTICAL, 
                                                   command=self.router_schedulers_tree.yview)
        self.router_schedulers_tree.configure(yscrollcommand=scrollbar_router_schedulers.set)
        
        self.router_schedulers_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_router_schedulers.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        schedulers_frame.columnconfigure(0, weight=1)
        schedulers_frame.rowconfigure(1, weight=1)
        schedulers_main_frame.columnconfigure(0, weight=1)
        schedulers_main_frame.rowconfigure(0, weight=1)
        
        # –ó–ê–î–ê–ß–ò (–Ω–∏–∂–Ω—è—è –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å)
        jobs_main_frame = ttk.Frame(right_paned)
        right_paned.add(jobs_main_frame, weight=1)
        
        jobs_frame = ttk.LabelFrame(jobs_main_frame, text="–ó–∞–¥–∞—á–∏ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ", padding="5")
        jobs_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        jobs_buttons_frame = ttk.Frame(jobs_frame)
        jobs_buttons_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        ttk.Button(jobs_buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self.refresh_router_jobs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(jobs_buttons_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.stop_selected_jobs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(jobs_buttons_frame, text="üßπ –£–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", 
                  command=self.remove_finished_jobs).pack(side=tk.LEFT)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        job_columns = ("id", "script", "status", "duration")
        self.router_jobs_tree = ttk.Treeview(jobs_frame, columns=job_columns, 
                                            show="headings", height=8, selectmode="extended")
        
        self.router_jobs_tree.heading("id", text="ID ‚Üï", 
                                     command=lambda: self.sort_treeview(self.router_jobs_tree, "id", True))
        self.router_jobs_tree.heading("script", text="–°–∫—Ä–∏–ø—Ç ‚Üï", 
                                     command=lambda: self.sort_treeview(self.router_jobs_tree, "script", False))
        self.router_jobs_tree.heading("status", text="–°—Ç–∞—Ç—É—Å ‚Üï", 
                                     command=lambda: self.sort_treeview(self.router_jobs_tree, "status", False))
        self.router_jobs_tree.heading("duration", text="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Üï", 
                                     command=lambda: self.sort_treeview(self.router_jobs_tree, "duration", False))
        
        self.router_jobs_tree.column("id", width=50, anchor=tk.CENTER)
        self.router_jobs_tree.column("script", width=150, anchor=tk.W)
        self.router_jobs_tree.column("status", width=70, anchor=tk.CENTER)
        self.router_jobs_tree.column("duration", width=90, anchor=tk.CENTER)
        
        self.router_jobs_tree.configure(style="Custom.Treeview")
        
        scrollbar_router_jobs = ttk.Scrollbar(jobs_frame, orient=tk.VERTICAL, 
                                             command=self.router_jobs_tree.yview)
        self.router_jobs_tree.configure(yscrollcommand=scrollbar_router_jobs.set)
        
        self.router_jobs_tree.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar_router_jobs.grid(row=1, column=1, sticky=(tk.N, tk.S))
        
        jobs_frame.columnconfigure(0, weight=1)
        jobs_frame.rowconfigure(1, weight=1)
        jobs_main_frame.columnconfigure(0, weight=1)
        jobs_main_frame.rowconfigure(0, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        content_frame.columnconfigure(0, weight=1)
        content_frame.rowconfigure(1, weight=1)
    
    def create_upload_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        upload_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(upload_frame, text="üöÄ –ó–∞–≥—Ä—É–∑–∫–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
        info_frame = ttk.LabelFrame(upload_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ", padding="5")
        info_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.upload_info_text = tk.Text(info_frame, height=4, state=tk.DISABLED)
        self.upload_info_text.grid(row=0, column=0, sticky=(tk.W, tk.E))
        info_frame.columnconfigure(0, weight=1)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        progress_frame = ttk.LabelFrame(upload_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å", padding="5")
        progress_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 5))
        
        self.progress_label = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ")
        self.progress_label.grid(row=1, column=0)
        
        progress_frame.columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(upload_frame)
        control_frame.grid(row=2, column=0, pady=(0, 10))
        
        self.start_button = ttk.Button(control_frame, text="üöÄ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", 
                                     command=self.start_upload, state=tk.DISABLED)
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                    command=self.stop_upload, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_frame = ttk.LabelFrame(upload_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=3, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        self.log_text = scrolledtext.ScrolledText(log_frame, height=25, state=tk.DISABLED, 
                                                 font=('Consolas', 12))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ—Ä–µ–π–º –≤–Ω–∏–∑—É
        log_settings_frame = ttk.LabelFrame(upload_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞", padding="5")
        log_settings_frame.grid(row=4, column=0, sticky=(tk.W, tk.E), pady=(5, 0))
        
        ttk.Button(log_settings_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log).pack(side=tk.LEFT, padx=(0, 15))
        
        # –†–µ–∂–∏–º –ª–æ–≥–∞ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏
        ttk.Label(log_settings_frame, text="–†–µ–∂–∏–º –ª–æ–≥–∞:").pack(side=tk.LEFT, padx=(0, 8))
        self.log_mode_var = tk.StringVar(value=self.log_mode)
        
        ttk.Radiobutton(log_settings_frame, text="–ü–æ–ª–Ω—ã–π", variable=self.log_mode_var, 
                       value="full", command=self.on_log_mode_change).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Radiobutton(log_settings_frame, text="–°–∂–∞—Ç—ã–π", variable=self.log_mode_var, 
                       value="compact", command=self.on_log_mode_change).pack(side=tk.LEFT, padx=(0, 15))
        
        ttk.Label(log_settings_frame, text=f"–ú–∞–∫—Å. —Å—Ç—Ä–æ–∫: {self.max_log_lines}").pack(side=tk.LEFT)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        upload_frame.columnconfigure(0, weight=1)
        upload_frame.rowconfigure(3, weight=1)  # –õ–æ–≥ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.upload_thread = None
        self.upload_stop_flag = threading.Event()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
        self.update_upload_info()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.auto_find_directory()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.restore_ui_settings()
    
    def log_message(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.log_mode == "compact":
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if level in ["ERROR", "WARNING"]:
                formatted_message = f"[{timestamp}] {level}: {message}\n"
            elif "‚úÖ" in message or "‚ùå" in message or "–ó–∞–≥—Ä—É–∂–µ–Ω–æ" in message or "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in message:
                formatted_message = f"[{timestamp}] {message}\n"
            else:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        else:
            # –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            formatted_message = f"[{timestamp}] {level}: {message}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.log_queue.put(formatted_message)
    
    def update_window_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        base_title = "MikrotikUploader GUI v1.0"
        if self.selected_router:
            new_title = f"{base_title} - {self.selected_router.name} ({self.selected_router.ip})"
        else:
            new_title = base_title
        self.root.title(new_title)
    
    def show_window_on_top(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        self.root.attributes('-topmost', True)
        self.root.lift()
        self.root.focus_force()
        
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ topmost
        def remove_topmost():
            self.root.attributes('-topmost', False)
        
        self.root.after(3000, remove_topmost)  # 3000 –º—Å = 3 —Å–µ–∫—É–Ω–¥—ã
    
    def restore_ui_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        if hasattr(self, 'saved_router_index') and self.saved_router_index >= 0:
            if self.saved_router_index < len(self.routers):
                self.selected_router = self.routers[self.saved_router_index]
                # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–∫–µ
                self.routers_tree.selection_set(str(self.saved_router_index))
                self.routers_tree.focus(str(self.saved_router_index))
                self.update_window_title()
                self.update_router_status()
                self.log_message(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä —Ä–æ—É—Ç–µ—Ä–∞: {self.selected_router.name}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        if hasattr(self, 'saved_column_widths'):
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤
            if 'scripts' in self.saved_column_widths:
                scripts_widths = self.saved_column_widths['scripts']
                if hasattr(self, 'router_scripts_tree'):
                    if 'name' in scripts_widths:
                        self.router_scripts_tree.column('name', width=scripts_widths['name'])
                    if 'size' in scripts_widths:
                        self.router_scripts_tree.column('size', width=scripts_widths['size'])
            
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —à–µ–¥—É–ª–µ—Ä–æ–≤
            if 'schedulers' in self.saved_column_widths:
                schedulers_widths = self.saved_column_widths['schedulers']
                if hasattr(self, 'router_schedulers_tree'):
                    if 'name' in schedulers_widths:
                        self.router_schedulers_tree.column('name', width=schedulers_widths['name'])
                    if 'status' in schedulers_widths:
                        self.router_schedulers_tree.column('status', width=schedulers_widths['status'])
                    if 'next_run' in schedulers_widths:
                        self.router_schedulers_tree.column('next_run', width=schedulers_widths['next_run'])
            
            # –®–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–æ–≤
            if 'files' in self.saved_column_widths:
                files_widths = self.saved_column_widths['files']
                if hasattr(self, 'files_tree'):
                    if 'name' in files_widths:
                        self.files_tree.column('name', width=files_widths['name'])
                    if 'size' in files_widths:
                        self.files_tree.column('size', width=files_widths['size'])
                    if 'modified' in files_widths:
                        self.files_tree.column('modified', width=files_widths['modified'])
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
        if hasattr(self, 'saved_window_geometry') and self.saved_window_geometry:
            try:
                self.root.geometry(self.saved_window_geometry)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    
    def sort_treeview(self, tree, col, is_numeric, reverse=False):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ Treeview –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ."""
        data = [(tree.set(child, col), child) for child in tree.get_children('')]
        
        if is_numeric:
            # –ß–∏—Å–ª–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤)
            try:
                data.sort(key=lambda x: int(x[0]) if str(x[0]).isdigit() else 0, reverse=reverse)
            except:
                data.sort(reverse=reverse)
        else:
            # –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            data.sort(key=lambda x: str(x[0]).lower(), reverse=reverse)
        
        # –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for index, (val, child) in enumerate(data):
            tree.move(child, '', index)
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∏–∫–∞
        next_reverse = not reverse
        if is_numeric:
            tree.heading(col, command=lambda: self.sort_treeview(tree, col, True, next_reverse))
        else:
            tree.heading(col, command=lambda: self.sort_treeview(tree, col, False, next_reverse))
    
    def process_log_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ª–æ–≥–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫."""
        try:
            messages_added = 0
            while messages_added < 10:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
                message = self.log_queue.get_nowait()
                
                self.log_text.config(state=tk.NORMAL)
                self.log_text.insert(tk.END, message)
                self.log_text.see(tk.END)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                line_count = int(self.log_text.index('end-1c').split('.')[0])
                if line_count > self.max_log_lines:
                    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_log_lines
                    lines_to_delete = line_count - self.max_log_lines
                    self.log_text.delete(1.0, f"{lines_to_delete + 1}.0")
                
                self.log_text.config(state=tk.DISABLED)
                messages_added += 1
                
        except queue.Empty:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, self.process_log_queue)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ–¥—É–ª–µ–º (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        module_dir = os.path.dirname(os.path.abspath(__file__))
        settings_file = os.path.join(module_dir, "uploader_settings.json")
        try:
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
                self.routers = [RouterConfig.from_dict(router_data) 
                              for router_data in settings.get('routers', [])]
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É
                self.source_directory = settings.get('source_directory', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.saved_router_index = settings.get('selected_router_index', -1)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.saved_column_widths = settings.get('column_widths', {})
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∞
                self.max_log_lines = settings.get('max_log_lines', 1000)
                self.log_mode = settings.get('log_mode', 'full')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.auto_refresh_enabled = settings.get('auto_refresh_enabled', False)
                self.auto_refresh_interval = settings.get('auto_refresh_interval', 3)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
                self.saved_window_geometry = settings.get('window_geometry', '')
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "ERROR")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä—è–¥–æ–º —Å –º–æ–¥—É–ª–µ–º (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        module_dir = os.path.dirname(os.path.abspath(__file__))
        settings_file = os.path.join(module_dir, "uploader_settings.json")
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
            selected_router_index = -1
            if self.selected_router:
                try:
                    selected_router_index = self.routers.index(self.selected_router)
                except ValueError:
                    pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            column_widths = {}
            if hasattr(self, 'router_scripts_tree'):
                column_widths['scripts'] = {
                    'name': self.router_scripts_tree.column('name', 'width'),
                    'size': self.router_scripts_tree.column('size', 'width')
                }
            if hasattr(self, 'router_schedulers_tree'):
                column_widths['schedulers'] = {
                    'name': self.router_schedulers_tree.column('name', 'width'),
                    'status': self.router_schedulers_tree.column('status', 'width'),
                    'next_run': self.router_schedulers_tree.column('next_run', 'width')
                }
            if hasattr(self, 'files_tree'):
                column_widths['files'] = {
                    'name': self.files_tree.column('name', 'width'),
                    'size': self.files_tree.column('size', 'width'),
                    'modified': self.files_tree.column('modified', 'width')
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            window_geometry = self.root.geometry()
            
            settings = {
                'routers': [router.to_dict() for router in self.routers],
                'source_directory': self.source_directory,
                'selected_router_index': selected_router_index,
                'column_widths': column_widths,
                'window_geometry': window_geometry,
                'max_log_lines': self.max_log_lines,
                'log_mode': self.log_mode,
                'auto_refresh_enabled': self.auto_refresh_enabled,
                'auto_refresh_interval': self.auto_refresh_interval
            }
            
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "ERROR")
    
    def refresh_routers_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        for item in self.routers_tree.get_children():
            self.routers_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        for i, router in enumerate(self.routers):
            self.routers_tree.insert("", tk.END, iid=i, values=(
                router.name, router.ip, router.username, router.port
            ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        self.update_router_status()
    
    def add_router(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        self.edit_router_dialog()
    
    def edit_router(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        self.edit_router_dialog(self.routers[router_index], router_index)
    
    def edit_router_dialog(self, router=None, index=None):
        """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞."""
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —Ä–æ—É—Ç–µ—Ä" if router is None else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.geometry("+%d+%d" % (self.root.winfo_rootx() + 50, self.root.winfo_rooty() + 50))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ:", "name"),
            ("IP –∞–¥—Ä–µ—Å:", "ip"),
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "username"),
            ("–ü–∞—Ä–æ–ª—å:", "password"),
            ("–ü–æ—Ä—Ç:", "port")
        ]
        
        vars = {}
        for i, (label_text, field_name) in enumerate(fields):
            ttk.Label(dialog, text=label_text).grid(row=i, column=0, sticky=tk.W, padx=10, pady=5)
            
            if field_name == "password":
                entry = ttk.Entry(dialog, show="*", width=30)
            else:
                entry = ttk.Entry(dialog, width=30)
            
            entry.grid(row=i, column=1, padx=10, pady=5)
            vars[field_name] = entry
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            if router:
                entry.insert(0, str(getattr(router, field_name)))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.grid(row=len(fields), column=0, columnspan=2, pady=20)
        
        def save_router():
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞
                new_router = RouterConfig(
                    name=vars["name"].get().strip(),
                    ip=vars["ip"].get().strip(),
                    username=vars["username"].get().strip(),
                    password=vars["password"].get(),
                    port=int(vars["port"].get() or 8728)
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not all([new_router.name, new_router.ip, new_router.username]):
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä
                if index is None:
                    self.routers.append(new_router)
                else:
                    self.routers[index] = new_router
                
                self.refresh_routers_list()
                self.save_settings()
                dialog.destroy()
                
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç")
        
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_router).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.LEFT, padx=5)
    
    def delete_router(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        router = self.routers[router_index]
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ä–æ—É—Ç–µ—Ä '{router.name}'?"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
            if self.selected_router == router:
                self.selected_router = None
                self.update_window_title()
            
            del self.routers[router_index]
            self.refresh_routers_list()
            self.save_settings()
    
    def test_connection(self):
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–æ—É—Ç–µ—Ä–æ–º."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        router_index = int(selection[0])
        router = self.routers[router_index]
        
        def test_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = router.ip
                uploader.username = router.username
                uploader.password = router.password
                uploader.port = router.port
                
                uploader.connect()
                success = uploader.login()
                uploader.sock.close()
                
                if success:
                    self.root.after(0, lambda: messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {router.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"))
                else:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –Ω–∞ {router.name}"))
                    
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"))
        
        threading.Thread(target=test_thread, daemon=True).start()
    
    def select_router_from_list(self):
        """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∞."""
        selection = self.routers_tree.selection()
        if not selection:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä –≤ —Å–ø–∏—Å–∫–µ")
            return
        
        router_index = int(selection[0])
        if router_index < len(self.routers):
            self.selected_router = self.routers[router_index]
            self.log_message(f"–í—ã–±—Ä–∞–Ω —Ä–æ—É—Ç–µ—Ä: {self.selected_router.name} ({self.selected_router.ip})")
            self.update_window_title()
            self.update_router_status()
            self.update_upload_info()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ—É—Ç–µ—Ä–∞
            self.auto_load_router_content()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ
            if self.auto_refresh_enabled:
                self.start_auto_refresh()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ
            if self.auto_refresh_enabled:
                self.start_auto_refresh()
    
    def update_router_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞."""
        if self.selected_router:
            status_text = f"‚úÖ {self.selected_router.name} ({self.selected_router.ip})"
            self.active_router_label.config(text=status_text, foreground='green')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ñ–∞–π–ª–æ–≤
            if hasattr(self, 'remote_status_var'):
                self.remote_status_var.set(f"–†–æ—É—Ç–µ—Ä: {self.selected_router.name}")
        else:
            self.active_router_label.config(text="‚ùå –†–æ—É—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground='red')
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ñ–∞–π–ª–æ–≤
            if hasattr(self, 'remote_status_var'):
                self.remote_status_var.set("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
    
    def browse_source_directory(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏."""
        directory = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏",
            initialdir=self.source_directory or os.getcwd()
        )
        
        if directory:
            self.source_directory = directory
            self.source_dir_var.set(directory)
            self.refresh_files_list()
            self.save_settings()
    
    def auto_find_directory(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞–ø–∫–∏ CodeNasos."""
        codenosos_dir = find_codenosos_dir()
        if codenosos_dir:
            self.source_directory = codenosos_dir
            self.source_dir_var.set(codenosos_dir)
            self.refresh_files_list()
            self.log_message(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {codenosos_dir}")
        else:
            self.log_message("–ü–∞–ø–∫–∞ CodeNasos –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "WARNING")
    
    def refresh_files_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤."""
        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.files_tree.delete(*self.files_tree.get_children())
        
        if not self.source_directory or not os.path.exists(self.source_directory):
            return
        
        # –ò—â–µ–º .rsc —Ñ–∞–π–ª—ã
        rsc_files = glob.glob(os.path.join(self.source_directory, '*.rsc'))
        
        if not rsc_files:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –¥–µ—Ä–µ–≤–æ
        for file_path in sorted(rsc_files):
            filename = os.path.basename(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            try:
                file_size = os.path.getsize(file_path)
            except:
                file_size = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                mod_time = os.path.getmtime(file_path)
                mod_date = datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M')
            except:
                mod_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–æ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ —á–µ–∫–±–æ–∫—Å–æ–≤)
            self.files_tree.insert('', 'end', values=(filename, file_size, mod_date))
        
        self.update_upload_info()
    
    def select_all_files(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã."""
        all_items = self.files_tree.get_children()
        self.files_tree.selection_set(all_items)
        self.update_upload_info()
    
    def deselect_all_files(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤."""
        self.files_tree.selection_remove(self.files_tree.selection())
        self.update_upload_info()
    
    def update_upload_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'upload_info_text') or not hasattr(self, 'start_button'):
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selected_items = self.files_tree.selection()
        selected_files = []
        for item_id in selected_items:
            values = self.files_tree.item(item_id, 'values')
            if values:
                selected_files.append(values[0])  # –ò–º—è —Ñ–∞–π–ª–∞
        
        info_text = ""
        if self.selected_router:
            info_text += f"–†–æ—É—Ç–µ—Ä: {self.selected_router.name} ({self.selected_router.ip})\n"
        else:
            info_text += "–†–æ—É—Ç–µ—Ä: –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
        
        info_text += f"–ü–∞–ø–∫–∞: {self.source_directory or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
        info_text += f"–§–∞–π–ª–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {len(selected_files)}\n"
        
        if selected_files:
            info_text += f"–§–∞–π–ª—ã: {', '.join(selected_files[:3])}"
            if len(selected_files) > 3:
                info_text += f" –∏ –µ—â–µ {len(selected_files) - 3}"
        
        self.upload_info_text.config(state=tk.NORMAL)
        self.upload_info_text.delete(1.0, tk.END)
        self.upload_info_text.insert(1.0, info_text)
        self.upload_info_text.config(state=tk.DISABLED)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ
        upload_in_progress = (self.upload_thread and self.upload_thread.is_alive())
        can_upload = (self.selected_router and 
                     self.source_directory and 
                     selected_files and 
                     not upload_in_progress)
        
        self.start_button.config(state=tk.NORMAL if can_upload else tk.DISABLED)
    

    
    def start_upload(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.upload_thread and self.upload_thread.is_alive():
            return
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if self.upload_thread and not self.upload_thread.is_alive():
            self.upload_thread = None
        
        self.upload_stop_flag.clear()
        self.upload_thread = threading.Thread(target=self.upload_worker, daemon=True)
        self.upload_thread.start()
        
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
    
    def stop_upload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏."""
        self.upload_stop_flag.set()
        self.log_message("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...", "WARNING")
    
    def upload_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            selected_items = self.files_tree.selection()
            selected_files = []
            for item_id in selected_items:
                values = self.files_tree.item(item_id, 'values')
                if values:
                    selected_files.append(values[0])  # –ò–º—è —Ñ–∞–π–ª–∞
            
            total_files = len(selected_files)
            
            self.log_message(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {total_files} —Ñ–∞–π–ª–æ–≤ –Ω–∞ {self.selected_router.name}")
            self.log_message(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_directory}")
            self.log_message(f"üéØ –†–æ—É—Ç–µ—Ä: {self.selected_router.ip}:{self.selected_router.port}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.root.after(0, lambda: self.progress_bar.config(maximum=total_files, value=0))
            self.root.after(0, lambda: self.progress_label.config(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."))
            
            uploaded_count = 0
            failed_count = 0
            
            for i, filename in enumerate(selected_files):
                if self.upload_stop_flag.is_set():
                    self.log_message("‚èπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
                    break
                
                file_path = os.path.join(self.source_directory, filename)
                script_name = filename.replace('.rsc', '')
                
                self.log_message(f"üìÑ [{i+1}/{total_files}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
                self.root.after(0, lambda filename=filename: self.progress_label.config(text=f"–ó–∞–≥—Ä—É–∂–∞–µ–º {filename}..."))
                
                try:
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
                    self.log_message(f"üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
                    try:
                        with codecs.open(file_path, 'r', encoding='utf-8-sig') as f:
                            content = f.read()
                        self.log_message(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ UTF-8, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    except UnicodeDecodeError:
                        self.log_message("‚ö†Ô∏è –û—à–∏–±–∫–∞ UTF-8, –ø—Ä–æ–±—É–µ–º Windows-1251")
                        with codecs.open(file_path, 'r', encoding='windows-1251') as f:
                            content = f.read()
                        self.log_message(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ Windows-1251, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏
                    content_size = len(content.encode('utf-8'))
                    if content_size > 15000:
                        self.log_message(f"üì¶ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ({content_size} –±–∞–π—Ç), –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏")
                    else:
                        self.log_message(f"üìÑ –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª ({content_size} –±–∞–π—Ç), –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
                    self.log_message(f"üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–æ—É—Ç–µ—Ä—É")
                    uploader = MikrotikUploader()
                    uploader.router_ip = self.selected_router.ip
                    uploader.username = self.selected_router.username
                    uploader.password = self.selected_router.password
                    uploader.port = self.selected_router.port
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º
                    self.log_message(f"‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞: {script_name}")
                    if uploader.upload_script(script_name, content):
                        uploaded_count += 1
                        self.log_message(f"‚úÖ {filename} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        failed_count += 1
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}", "ERROR")
                
                except Exception as e:
                    failed_count += 1
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filename}: {e}", "ERROR")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.root.after(0, lambda i=i: self.progress_bar.config(value=i+1))
                
                if self.upload_stop_flag.is_set():
                    break
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if not self.upload_stop_flag.is_set():
                self.log_message(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {uploaded_count}, –û—à–∏–±–æ–∫: {failed_count}")
                self.root.after(0, lambda: self.progress_label.config(text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {uploaded_count}/{total_files}"))
            
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", "ERROR")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.upload_thread = None
            self.root.after(0, lambda: self.stop_button.config(state=tk.DISABLED))
            self.root.after(0, self.update_upload_info)
    
    def refresh_router_scripts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ"""
        if not self.selected_router:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
            return
        self.auto_load_router_content()
    
    def refresh_router_schedulers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ"""
        if not self.selected_router:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
            return
        self.auto_load_router_content()
    
    def refresh_router_jobs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ"""
        if not self.selected_router:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä")
            return
        self.load_router_jobs()
    
    def delete_selected_scripts(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        selected_items = self.router_scripts_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        scripts_to_delete = []
        for item in selected_items:
            script_name = self.router_scripts_tree.item(item)['values'][0]
            scripts_to_delete.append(script_name)
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              f"–£–¥–∞–ª–∏—Ç—å {len(scripts_to_delete)} —Å–∫—Ä–∏–ø—Ç(–æ–≤)?"):
            
            def delete_scripts_thread():
                try:
                    uploader = MikrotikUploader()
                    uploader.router_ip = self.selected_router.ip
                    uploader.username = self.selected_router.username
                    uploader.password = self.selected_router.password
                    uploader.port = self.selected_router.port
                    
                    uploader.connect()
                    if not uploader.login():
                        raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    
                    success_count = 0
                    for script_name in scripts_to_delete:
                        self.log_message(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞: {script_name}", "INFO")
                        if uploader.remove_script(script_name):
                            success_count += 1
                            self.log_message(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} —É–¥–∞–ª–µ–Ω", "INFO")
                        else:
                            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name}", "ERROR")
                    
                    uploader.sock.close()
                    self.log_message(f"üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(scripts_to_delete)}", "INFO")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
                    self.root.after(0, self.auto_load_router_content)
                    
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}", "ERROR")
                    
            threading.Thread(target=delete_scripts_thread, daemon=True).start()
    
    def delete_selected_schedulers(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤"""
        selected_items = self.router_schedulers_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–µ–¥—É–ª–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        schedulers_to_delete = []
        for item in selected_items:
            scheduler_name = self.router_schedulers_tree.item(item)['values'][0]
            schedulers_to_delete.append(scheduler_name)
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              f"–£–¥–∞–ª–∏—Ç—å {len(schedulers_to_delete)} —à–µ–¥—É–ª–µ—Ä(–æ–≤)?"):
            
            def delete_schedulers_thread():
                try:
                    uploader = MikrotikUploader()
                    uploader.router_ip = self.selected_router.ip
                    uploader.username = self.selected_router.username
                    uploader.password = self.selected_router.password
                    uploader.port = self.selected_router.port
                    
                    uploader.connect()
                    if not uploader.login():
                        raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    
                    success_count = 0
                    for scheduler_name in schedulers_to_delete:
                        self.log_message(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞: {scheduler_name}", "INFO")
                        if uploader.remove_scheduler(scheduler_name):
                            success_count += 1
                            self.log_message(f"‚úÖ –®–µ–¥—É–ª–µ—Ä {scheduler_name} —É–¥–∞–ª–µ–Ω", "INFO")
                        else:
                            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞ {scheduler_name}", "ERROR")
                    
                    uploader.sock.close()
                    self.log_message(f"üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(schedulers_to_delete)}", "INFO")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
                    self.root.after(0, self.auto_load_router_content)
                    
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤: {e}", "ERROR")
                    
            threading.Thread(target=delete_schedulers_thread, daemon=True).start()
    
    def enable_selected_schedulers(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤"""
        selected_items = self.router_schedulers_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–µ–¥—É–ª–µ—Ä—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
            return
        
        schedulers_to_enable = []
        for item in selected_items:
            scheduler_name = self.router_schedulers_tree.item(item)['values'][0]
            schedulers_to_enable.append(scheduler_name)
        
        def enable_schedulers_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                uploader.connect()
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                success_count = 0
                for scheduler_name in schedulers_to_enable:
                    self.log_message(f"‚ñ∂Ô∏è –í–∫–ª—é—á–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞: {scheduler_name}", "INFO")
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —à–µ–¥—É–ª–µ—Ä–∞
                    uploader.write_sentence(['/system/scheduler/print', f'?name={scheduler_name}'])
                    scheduler_id = None
                    
                    while True:
                        reply = uploader.read_sentence()
                        if not reply or reply[0] == '!done':
                            break
                        if reply[0] == '!re':
                            for item in reply:
                                if item.startswith('=.id='):
                                    scheduler_id = item[5:]
                                    break
                    
                    if scheduler_id:
                        # –í–∫–ª—é—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä (disabled=false)
                        uploader.write_sentence(['/system/scheduler/set', f'=.id={scheduler_id}', '=disabled=false'])
                        reply = uploader.read_sentence()
                        if reply and reply[0] == '!done':
                            success_count += 1
                            self.log_message(f"‚úÖ –®–µ–¥—É–ª–µ—Ä {scheduler_name} –≤–∫–ª—é—á–µ–Ω", "INFO")
                        else:
                            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞ {scheduler_name}", "ERROR")
                    else:
                        self.log_message(f"‚ùå –®–µ–¥—É–ª–µ—Ä {scheduler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                
                uploader.sock.close()
                self.log_message(f"üéâ –í–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(schedulers_to_enable)}", "INFO")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
                self.root.after(0, self.auto_load_router_content)
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤: {e}", "ERROR")
                
        threading.Thread(target=enable_schedulers_thread, daemon=True).start()
    
    def disable_selected_schedulers(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–µ–¥—É–ª–µ—Ä–æ–≤"""
        selected_items = self.router_schedulers_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —à–µ–¥—É–ª–µ—Ä—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
            return
        
        schedulers_to_disable = []
        for item in selected_items:
            scheduler_name = self.router_schedulers_tree.item(item)['values'][0]
            schedulers_to_disable.append(scheduler_name)
        
        def disable_schedulers_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                uploader.connect()
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                success_count = 0
                for scheduler_name in schedulers_to_disable:
                    self.log_message(f"‚è∏Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —à–µ–¥—É–ª–µ—Ä–∞: {scheduler_name}", "INFO")
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID —à–µ–¥—É–ª–µ—Ä–∞
                    uploader.write_sentence(['/system/scheduler/print', f'?name={scheduler_name}'])
                    scheduler_id = None
                    
                    while True:
                        reply = uploader.read_sentence()
                        if not reply or reply[0] == '!done':
                            break
                        if reply[0] == '!re':
                            for item in reply:
                                if item.startswith('=.id='):
                                    scheduler_id = item[5:]
                                    break
                    
                    if scheduler_id:
                        # –û—Ç–∫–ª—é—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä (disabled=true)
                        uploader.write_sentence(['/system/scheduler/set', f'=.id={scheduler_id}', '=disabled=true'])
                        reply = uploader.read_sentence()
                        if reply and reply[0] == '!done':
                            success_count += 1
                            self.log_message(f"‚úÖ –®–µ–¥—É–ª–µ—Ä {scheduler_name} –æ—Ç–∫–ª—é—á–µ–Ω", "INFO")
                        else:
                            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–∞ {scheduler_name}", "ERROR")
                    else:
                        self.log_message(f"‚ùå –®–µ–¥—É–ª–µ—Ä {scheduler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                
                uploader.sock.close()
                self.log_message(f"üéâ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(schedulers_to_disable)}", "INFO")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
                self.root.after(0, self.auto_load_router_content)
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤: {e}", "ERROR")
                
        threading.Thread(target=disable_schedulers_thread, daemon=True).start()
    
    def stop_selected_jobs(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        selected_items = self.router_jobs_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        
        jobs_to_stop = []
        for item in selected_items:
            job_id = self.router_jobs_tree.item(item)['values'][0]
            jobs_to_stop.append(job_id)
        
        def stop_jobs_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                uploader.connect()
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                success_count = 0
                for job_id in jobs_to_stop:
                    self.log_message(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ ID: {job_id}", "INFO")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
                    uploader.write_sentence(['/system/script/job/stop', f'=.id={job_id}'])
                    reply = uploader.read_sentence()
                    
                    if reply and reply[0] == '!done':
                        success_count += 1
                        self.log_message(f"‚úÖ –ó–∞–¥–∞—á–∞ {job_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "INFO")
                    else:
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ {job_id}: {reply}", "ERROR")
                
                uploader.sock.close()
                self.log_message(f"üéâ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(jobs_to_stop)}", "INFO")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
                self.root.after(0, self.load_router_jobs)
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á: {e}", "ERROR")
                
        threading.Thread(target=stop_jobs_thread, daemon=True).start()
    
    def remove_finished_jobs(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        def remove_jobs_thread():
            try:
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                uploader.connect()
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                uploader.write_sentence(['/system/script/job/print'])
                finished_jobs = []
                
                while True:
                    reply = uploader.read_sentence()
                    if not reply or reply[0] == '!done':
                        break
                    if reply[0] == '!re':
                        job_id = None
                        job_status = None
                        
                        for item in reply:
                            if item.startswith('=.id='):
                                job_id = item[5:]
                            elif item.startswith('=status='):
                                job_status = item[8:]
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ç—É—Å != running)
                        if job_id and job_status and job_status != 'running':
                            finished_jobs.append(job_id)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                success_count = 0
                for job_id in finished_jobs:
                    self.log_message(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ ID: {job_id}", "INFO")
                    
                    uploader.write_sentence(['/system/script/job/remove', f'=.id={job_id}'])
                    reply = uploader.read_sentence()
                    
                    if reply and reply[0] == '!done':
                        success_count += 1
                    else:
                        self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job_id}: {reply}", "ERROR")
                
                uploader.sock.close()
                self.log_message(f"üéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{len(finished_jobs)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", "INFO")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á
                self.root.after(0, self.load_router_jobs)
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}", "ERROR")
                
        threading.Thread(target=remove_jobs_thread, daemon=True).start()
    
    def load_router_jobs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —Ä–æ—É—Ç–µ—Ä–∞"""
        if not self.selected_router:
            return
        
        def load_jobs_thread():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ API
                # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                jobs = [
                    {"id": "1", "script": "test-script", "status": "running", "duration": "00:05:30"},
                    {"id": "2", "script": "backup-script", "status": "finished", "duration": "00:01:15"}
                ]
                
                def update_jobs_ui():
                    self.router_jobs_tree.delete(*self.router_jobs_tree.get_children())
                    for job in jobs:
                        self.router_jobs_tree.insert('', 'end', values=(
                            job['id'], job['script'], job['status'], job['duration']
                        ))
                
                self.root.after(0, update_jobs_ui)
                
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}", "ERROR")
        
        threading.Thread(target=load_jobs_thread, daemon=True).start()

    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.stop_auto_refresh()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
        if self.upload_thread and self.upload_thread.is_alive():
            self.upload_stop_flag.set()
            self.upload_thread.join(timeout=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.root.destroy()

    def auto_load_router_content(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ –±–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤."""
        if not self.selected_router:
            return
        
        def auto_load_thread():
            try:
                self.log_message("üîó –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞", "INFO")
                
                uploader = MikrotikUploader()
                uploader.router_ip = self.selected_router.ip
                uploader.username = self.selected_router.username
                uploader.password = self.selected_router.password
                uploader.port = self.selected_router.port
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
                self.log_message(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.selected_router.ip}:{self.selected_router.port}", "INFO")
                uploader.connect()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - 3 —Å–µ–∫—É–Ω–¥—ã
                uploader.sock.settimeout(3.0)
                self.log_message("‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: 3 —Å–µ–∫", "INFO")
                
                self.log_message(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.selected_router.username}", "INFO")
                if not uploader.login():
                    raise Exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                self.log_message("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "INFO")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ë–ï–ó source –ø–æ–ª—è (–∏–∑–±–µ–≥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é)
                self.log_message("üìú –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ë–ï–ó source: /system/script/print .proplist", "INFO")
                uploader.write_sentence(['/system/script/print', '=.proplist=.id,name,owner,run-count'])
                scripts = []
                scripts_count = 0
                
                while True:
                    try:
                        reply = uploader.read_sentence()
                        if not reply:
                            self.log_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç", "INFO")
                            break
                            
                        if reply[0] == '!done':
                            # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π –º–∞—Ä–∫–µ—Ä - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
                            self.log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è !done", "INFO")
                            break
                        elif reply[0] == '!re':
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∫—Ä–∏–ø—Ç –ë–ï–ó source –ø–æ–ª—è
                            script_info = {'name': '', 'owner': '', 'run-count': '0'}
                            for item in reply[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º !re
                                if item.startswith('=name='):
                                    script_info['name'] = item[6:]
                                elif item.startswith('=owner='):
                                    script_info['owner'] = item[7:]
                                elif item.startswith('=run-count='):
                                    script_info['run-count'] = item[12:]
                            
                            if script_info['name']:
                                scripts.append(script_info)
                                scripts_count += 1
                                run_count = script_info.get('run-count', '0')
                                self.log_message(f"üìã –°–∫—Ä–∏–ø—Ç {scripts_count}: {script_info['name']} (–≤–ª–∞–¥–µ–ª–µ—Ü: {script_info['owner']}, –∑–∞–ø—É—Å–∫–æ–≤: {run_count})", "INFO")
                        elif reply[0] == '!trap':
                            # –û—à–∏–±–∫–∞ API - –≤—ã—Ö–æ–¥–∏–º
                            self.log_message(f"‚ùå API Error: {reply}", "ERROR")
                            break
                            
                    except Exception as e:
                        # –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º —á—Ç–µ–Ω–∏–µ
                        if scripts_count > 0:
                            # –ï—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            self.log_message(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {scripts_count} —Å–∫—Ä–∏–ø—Ç–æ–≤", "INFO")
                            break
                        else:
                            raise e
                
                # –ü–æ–ª—É—á–∞–µ–º —à–µ–¥—É–ª–µ—Ä—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                self.log_message("‚è∞ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–æ–≤: /system/scheduler/print", "INFO")
                uploader.write_sentence(['/system/scheduler/print'])
                schedulers = []
                schedulers_count = 0
                
                while True:
                    try:
                        reply = uploader.read_sentence()
                        if not reply:
                            self.log_message("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —à–µ–¥—É–ª–µ—Ä–æ–≤", "INFO")
                            break
                            
                        if reply[0] == '!done':
                            self.log_message("‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤ !done", "INFO")
                            break
                        elif reply[0] == '!re':
                            scheduler_info = {'name': '', 'disabled': 'true', 'next-run': ''}
                            for item in reply[1:]:
                                if item.startswith('=name='):
                                    scheduler_info['name'] = item[6:]
                                elif item.startswith('=disabled='):
                                    scheduler_info['disabled'] = item[10:]
                                elif item.startswith('=next-run='):
                                    scheduler_info['next-run'] = item[11:]
                            
                            if scheduler_info['name']:
                                schedulers.append(scheduler_info)
                                schedulers_count += 1
                                status = "–∞–∫—Ç–∏–≤–µ–Ω" if scheduler_info['disabled'] == 'false' else "–æ—Ç–∫–ª—é—á–µ–Ω"
                                self.log_message(f"‚è∞ –®–µ–¥—É–ª–µ—Ä {schedulers_count}: {scheduler_info['name']} ({status})", "INFO")
                        elif reply[0] == '!trap':
                            self.log_message(f"‚ùå Scheduler API Error: {reply}", "ERROR")
                            break
                            
                    except Exception as e:
                        if schedulers_count > 0:
                            self.log_message(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è —à–µ–¥—É–ª–µ—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {schedulers_count}", "INFO")
                            break
                        else:
                            raise e
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self.log_message("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–æ—É—Ç–µ—Ä–æ–º", "INFO")
                uploader.sock.close()
                
                self.log_message(f"üéØ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(scripts)} —Å–∫—Ä–∏–ø—Ç–æ–≤, {len(schedulers)} —à–µ–¥—É–ª–µ—Ä–æ–≤", "INFO")
                
                def update_ui():
                    # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ router_scripts_tree
                    self.router_scripts_tree.delete(*self.router_scripts_tree.get_children())
                    for script in scripts:
                        run_count = script.get('run-count', '0')
                        self.router_scripts_tree.insert('', 'end', values=(script['name'], run_count))
                    
                    # –û—á–∏—â–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —à–µ–¥—É–ª–µ—Ä—ã –≤ router_schedulers_tree
                    self.router_schedulers_tree.delete(*self.router_schedulers_tree.get_children())
                    for scheduler in schedulers:
                        status = "‚úì" if scheduler.get('disabled') == 'false' else "‚úó"
                        next_run = scheduler.get('next-run', '–Ω–∏–∫–æ–≥–¥–∞')
                        self.router_schedulers_tree.insert('', 'end', values=(scheduler['name'], status, next_run))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ
                    if hasattr(self, 'remote_scripts_tree'):
                        self.remote_scripts_tree.delete(*self.remote_scripts_tree.get_children())
                        for script in scripts:
                            run_count = script.get('run-count', '0')
                            self.remote_scripts_tree.insert('', 'end', values=(script['name'], run_count))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                        self.remote_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–∫–∏ "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
                        self.content_status_var.set(f"–°–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}, –®–µ–¥—É–ª–µ—Ä–æ–≤: {len(schedulers)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, update_ui)
                
            except Exception as e:
                self.log_message(f"–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}", "WARNING")
                
                def update_error_status():
                    if hasattr(self, 'remote_status_var'):
                        self.remote_status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    if hasattr(self, 'content_status_var'):
                        self.content_status_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏ –≤ UI –ø–æ—Ç–æ–∫–µ
                self.root.after(0, update_error_status)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=auto_load_thread, daemon=True).start()

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞."""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state=tk.DISABLED)

    def on_log_mode_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ª–æ–≥–∞."""
        self.log_mode = self.log_mode_var.get()
        mode_text = "–ü–æ–ª–Ω—ã–π" if self.log_mode == "full" else "–°–∂–∞—Ç—ã–π"
        self.log_message(f"–ò–∑–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º –ª–æ–≥–∞: {mode_text}", "INFO")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    root = tk.Tk()
    app = MikrotikUploaderGUI(root)
    root.mainloop()

if __name__ == '__main__':
    main()