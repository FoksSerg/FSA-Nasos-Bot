#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö RouterOS API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
"""

import socket
import time

class MikrotikTester:
    def __init__(self, router_ip, username, password, port=8728):
        self.router_ip = router_ip
        self.username = username
        self.password = password
        self.port = port
        self.sock = None
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–æ—É—Ç–µ—Ä—É"""
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.settimeout(60)
        self.sock.connect((self.router_ip, self.port))
        
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.sock:
            self.sock.close()
            
    def write_word(self, word):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–∫–æ–ø–∏—è –∏–∑ MikrotikUploader)"""
        if isinstance(word, bytes):
            data = word
        else:
            data = word.encode("ascii", errors="ignore")
                
        length = len(data)
        
        if length < 0x80:
            self.sock.send(length.to_bytes(1, byteorder='big'))
        elif length < 0x4000:
            self.sock.send(((length | 0x8000) & 0xFFFF).to_bytes(2, byteorder='big'))
        
        self.sock.send(data)
        
    def write_sentence(self, words):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ MikrotikUploader)"""
        for word in words:
            self.write_word(word)
        self.write_word("")  # –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ - –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞
        
    def read_word(self):
        """–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–∫–æ–ø–∏—è –∏–∑ MikrotikUploader)"""
        ret = b''
        
        length = int.from_bytes(self.sock.recv(1), byteorder='big')
        
        if length & 0x80:
            length = ((length & 0x7F) << 8) | int.from_bytes(self.sock.recv(1), byteorder='big')
        
        while length > 0:
            t = self.sock.recv(length)
            ret += t
            length -= len(t)
        
        try:
            return ret.decode("ascii", errors="ignore")
        except UnicodeDecodeError:
            return ret.decode('utf-8', errors='replace')
        
    def read_sentence(self):
        """–ß—Ç–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ MikrotikUploader)"""
        ret = []
        
        while True:
            word = self.read_word()
            if not word:
                break
            ret.append(word)
            
        return ret
        
    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–∫–æ–ø–∏—è –∏–∑ MikrotikUploader)"""
        print("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.write_sentence(['/login'])
        self.read_sentence()
        
        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.write_sentence(['/login', f'=name={self.username}', f'=password={self.password}'])
        reply = self.read_sentence()
        
        if reply[0] == '!done':
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {reply}")
            return False
            
    def test_script_id_requests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        
        print("\n" + "="*80)
        print("üÜî –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø ID –°–ö–†–ò–ü–¢–û–í")
        print("="*80)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        print("\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        self.write_sentence(['/system/script/print', '=.proplist=name'])
        
        available_scripts = []
        while True:
            reply = self.read_sentence()
            if not reply:
                break
            if reply[0] == '!re':
                for item in reply[1:]:
                    if item.startswith('=name='):
                        available_scripts.append(item[6:])
            elif reply[0] == '!done':
                break
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {len(available_scripts)}")
        for i, script in enumerate(available_scripts[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i}. {script}")
        
        if not available_scripts:
            print("‚ùå –ù–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ID
        test_scripts = available_scripts[:3]
        
        id_requests = [
            {
                "name": "ID —Ç–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å source)",
                "command": ['/system/script/print'],
                "description": "–ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"
            },
            {
                "name": "ID —Ç–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ ID –∏ name",  
                "command": ['/system/script/print', '=.proplist=.id,name'],
                "description": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ source"
            },
            {
                "name": "ID —Ç–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞",
                "command": ['/system/script/print', f'?name={test_scripts[0]}', '=.proplist=.id,name'],
                "description": f"–ü–æ–∏—Å–∫ ID –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ '{test_scripts[0]}'"
            }
        ]
        
        for test in id_requests:
            print("\n" + "-"*60)
            print(f"üß™ {test['name']}")
            print(f"üí° {test['description']}")
            print("-"*60)
            
            try:
                print(f"üì§ –ó–∞–ø—Ä–æ—Å: {test['command']}")
                self.write_sentence(test['command'])
                
                scripts_found = 0
                scripts_with_id = 0
                
                while True:
                    reply = self.read_sentence()
                    if not reply:
                        break
                        
                    if reply[0] == '!re':
                        scripts_found += 1
                        
                        script_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        script_id = None
                        script_source_len = 0
                        
                        for item in reply[1:]:
                            if item.startswith('=name='):
                                script_name = item[6:]
                            elif item.startswith('=.id='):
                                script_id = item[5:]
                                scripts_with_id += 1
                            elif item.startswith('=source='):
                                script_source_len = len(item[8:])
                        
                        print(f"   üìú –°–∫—Ä–∏–ø—Ç: {script_name}")
                        print(f"      üÜî ID: {script_id if script_id else '‚ùå –ù–ï –ü–û–õ–£–ß–ï–ù'}")
                        if script_source_len > 0:
                            print(f"      üìÑ Source: {script_source_len} –±–∞–π—Ç")
                            
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 3 —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        if scripts_found >= 3:
                            print(f"   ... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)")
                            # –î–æ—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                            while True:
                                remaining = self.read_sentence()
                                if not remaining or remaining[0] == '!done':
                                    break
                            break
                                
                    elif reply[0] == '!done':
                        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
                        break
                    elif reply[0] == '!trap':
                        print(f"‚ùå –û—à–∏–±–∫–∞: {reply}")
                        break
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {scripts_with_id}/{scripts_found} —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ ID")
                        
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
            time.sleep(1)

    def test_script_requests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        
        requests = [
            {
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å",
                "command": ['/system/script/print']
            },
            {
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 2: –ë–µ–∑ source –ø–æ–ª—è",
                "command": ['/system/script/print', '=.proplist=.id,name,owner,run-count']
            },
            {
                "name": "–í–∞—Ä–∏–∞–Ω—Ç 3: Without-paging",
                "command": ['/system/script/print', '=without-paging=']
            }
        ]
        
        for test in requests:
            print("\n" + "="*80)
            print(f"üß™ {test['name']}")
            print("="*80)
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {test['command']}")
                self.write_sentence(test['command'])
                
                scripts_count = 0
                
                # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç—ã
                while True:
                    reply = self.read_sentence()
                    if not reply:
                        break
                        
                    print(f"üì• –û—Ç–≤–µ—Ç: {reply[0]}")
                    
                    if reply[0] == '!re':
                        scripts_count += 1
                        
                        # –ò—â–µ–º –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
                        script_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        script_source_len = 0
                        
                        for item in reply[1:]:
                            if item.startswith('=name='):
                                script_name = item[6:]
                            elif item.startswith('=source='):
                                script_source_len = len(item[8:])
                                
                        print(f"   üìú –°–∫—Ä–∏–ø—Ç #{scripts_count}: {script_name} (source: {script_source_len} –±–∞–π—Ç)")
                        
                    elif reply[0] == '!done':
                        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: {scripts_count}")
                        break
                    elif reply[0] == '!trap':
                        print(f"‚ùå –û—à–∏–±–∫–∞: {reply}")
                        break
                        
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

def test_api_variants():
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RouterOS API –ó–ê–ü–†–û–°–û–í")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ GUI
    IP = "10.10.44.1"
    PORT = 8728
    USERNAME = "FokinSA"
    PASSWORD = "gjhfvtyznm"
    
    tester = MikrotikTester(IP, USERNAME, PASSWORD, PORT)
    
    try:
        print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {IP}:{PORT}...")
        tester.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if not tester.login():
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return
            
        # –ù–û–í–´–ï –¢–ï–°–¢–´ ID –í –ù–ê–ß–ê–õ–ï
        tester.test_script_id_requests()
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
        tester.test_script_requests()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüîå –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        tester.close()

if __name__ == "__main__":
    test_api_variants()