#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π RouterOS —Å–∫—Ä–∏–ø—Ç–æ–≤ (–ü–†–û–°–¢–û–ô –ê–õ–ì–û–†–ò–¢–ú)
–ê–≤—Ç–æ—Ä: –§–æ–∫–∏–Ω –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
–î–∞—Ç–∞: 24 –∏—é–Ω—è 2025

–ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º:
1. –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å # - —É–¥–∞–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
2. –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - —É–¥–∞–ª—è–µ–º  
3. –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ - —É–¥–∞–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
4. –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ; –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \r\ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ü–µ ;
5. –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫ \r\ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
"""

import os
import sys
from pathlib import Path



def process_line(line):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Å—Ç–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    
    # 1. –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å # - —É–¥–∞–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
    if line.strip().startswith('#'):
        return None
    
    # 2. –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - —É–¥–∞–ª—è–µ–º
    if not line.strip():
        return None
    
    # 3. –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—Ç—É–ø—ã –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ - —É–¥–∞–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    line = line.lstrip()
    
    # 4. –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ; –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \r\ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ü–µ ;
    stripped = line.rstrip()
    if not stripped.endswith(';') and not stripped.endswith('\\r\\'):
        # –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ; –∫ –ø—É—Å—Ç—ã–º –±–ª–æ–∫–∞–º on-error –∏ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        # –∞ —Ç–∞–∫–∂–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–º—Å—è –Ω–∞ } –∏–ª–∏ {
        if not stripped.endswith('{}') and not stripped.endswith('do={') and not stripped.endswith('}') and not stripped.endswith('{'):
            line = stripped + ';\n'
        else:
            line = line.rstrip() + '\n'
    else:
        # 5. –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫ \r\ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        line = line.rstrip() + '\n'
    
    return line

def compact_routeros_file(input_file, output_file):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é RouterOS —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        input_path = Path(input_file)
        output_path = Path(output_file)
        
        if not input_path.exists():
            return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}", 0, 0, 0
        
        with open(input_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        original_size = sum(len(line.encode('utf-8')) for line in lines)
        syntax_fixes = 0
        
        compact_lines = []
        for line in lines:
            processed_line = process_line(line)
            
            if processed_line is not None:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ;)
                if not line.rstrip().endswith(';') and processed_line.rstrip().endswith(';'):
                    syntax_fixes += 1
                
                compact_lines.append(processed_line)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.writelines(compact_lines)
        
        compact_size = sum(len(line.encode('utf-8')) for line in compact_lines)
        
        return True, f"–°–æ–∑–¥–∞–Ω: {output_path}", original_size, compact_size, syntax_fixes
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", 0, 0, 0

def auto_process_project():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ .rsc —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∞–º —Å–∫—Ä–∏–ø—Ç (–∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ)
    script_dir = Path(__file__).parent
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É CodeNasos —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    code_nasos_dir = script_dir / "CodeNasos"
    code_nasos_dir.mkdir(exist_ok=True)
    
    # –ò—â–µ–º .rsc —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ (–Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ)
    rsc_files = list(script_dir.glob("*.rsc"))
    
    project_modules = []
    for file_path in rsc_files:
        filename = file_path.name
        if ("-Compact" not in filename and 
            not filename.startswith("Test-") and
            filename.startswith("Nasos-")):
            project_modules.append(file_path)
    
    if not project_modules:
        return [(False, "–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ Nasos-*.rsc –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ", 0, 0, 0)]
    
    results = []
    for module_path in project_modules:
        output_path = code_nasos_dir / module_path.name
        success, message, orig_size, comp_size, fixes = compact_routeros_file(
            module_path, output_path)
        results.append((success, message, orig_size, comp_size, fixes))
    
    return results

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} –±–∞–π—Ç"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"

def calculate_savings(original, compact):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é –º–µ—Å—Ç–∞"""
    if original == 0:
        return 0
    return ((original - compact) / original) * 100

def run_auto_compact():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö RouterOS —Å–∫—Ä–∏–ø—Ç–æ–≤ (–ü–†–û–°–¢–û–ô –ê–õ–ì–û–†–ò–¢–ú) ===")
    print("–ê–≤—Ç–æ—Ä: –§–æ–∫–∏–Ω –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á")
    print("–î–∞—Ç–∞: 24 –∏—é–Ω—è 2025")
    print()
    print("üîÑ –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ–º–ø–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   1. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—Å—Ç—Ä–æ–∫–∏ —Å #)")
    print("   2. –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫")
    print("   3. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ")
    print("   4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ; –µ—Å–ª–∏ –Ω–µ—Ç –∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \\r\\")
    print("   5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å \\r\\ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print()
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤ –ø–∞–ø–∫–µ CodeNasos/")
    print("-" * 80)
    
    results = auto_process_project()
    
    total_original = 0
    total_compact = 0
    total_fixes = 0
    success_count = 0
    
    for success, message, orig_size, comp_size, fixes in results:
        print(f"{'‚úì' if success else '‚úó'} {message}")
        
        if success:
            print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª: {format_size(orig_size)} ‚Üí –ö–æ–º–ø–∞–∫—Ç: {format_size(comp_size)} "
                  f"(—ç–∫–æ–Ω–æ–º–∏—è {calculate_savings(orig_size, comp_size):.1f}%)")
            
            if fixes > 0:
                print(f"  üîß –î–æ–±–∞–≤–ª–µ–Ω–æ ; –∫ –∫–æ–º–∞–Ω–¥–∞–º: {fixes}")
            
            total_original += orig_size
            total_compact += comp_size
            total_fixes += fixes
            success_count += 1
        
        print()
    
    if success_count > 0:
        print("-" * 80)
        print(f"‚úÖ –ò–¢–û–ì–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {success_count}")
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {format_size(total_original)}")
        print(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö: {format_size(total_compact)}")
        print(f"üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {format_size(total_original - total_compact)} "
              f"({calculate_savings(total_original, total_compact):.1f}%)")
        
        if total_fixes > 0:
            print(f"üîß –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ; –∫ –∫–æ–º–∞–Ω–¥–∞–º: {total_fixes}")
        
        print()
        print("üéØ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Winbox!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è")

# –ê–í–¢–û–ó–ê–ü–£–°–ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    run_auto_compact()
