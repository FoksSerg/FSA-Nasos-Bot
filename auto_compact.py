#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π RouterOS —Å–∫—Ä–∏–ø—Ç–æ–≤
–ê–≤—Ç–æ—Ä: –§–æ–∫–∏–Ω –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
–î–∞—Ç–∞: 24 –∏—é–Ω—è 2025

–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
"""

import os
import sys
import re
from pathlib import Path

def remove_comments(line):
    """–£–¥–∞–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ RouterOS"""
    if line.strip().startswith('#'):
        return ''
    
    in_string = False
    quote_char = None
    i = 0
    
    while i < len(line):
        char = line[i]
        
        if char in ['"', "'"]:
            if not in_string:
                in_string = True
                quote_char = char
            elif char == quote_char:
                if i == 0 or line[i-1] != '\\':
                    in_string = False
                    quote_char = None
        elif char == '#' and not in_string:
            return line[:i].rstrip()
        
        i += 1
    
    return line

def compact_routeros_file(input_file, output_file):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é RouterOS —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(input_file):
            return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}", 0, 0
        
        with open(input_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        original_size = sum(len(line.encode('utf-8')) for line in lines)
        
        compact_lines = []
        for line in lines:
            line = remove_comments(line)
            line = line.lstrip().rstrip()
            if line:
                compact_lines.append(line + '\n')
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.writelines(compact_lines)
        
        compact_size = sum(len(line.encode('utf-8')) for line in compact_lines)
        
        return True, f"–°–æ–∑–¥–∞–Ω: {output_file}", original_size, compact_size
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {str(e)}", 0, 0

def auto_process_project():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ .rsc —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    code_nasos_dir = Path("CodeNasos")
    code_nasos_dir.mkdir(exist_ok=True)
    
    current_dir = Path(".")
    rsc_files = list(current_dir.glob("*.rsc"))
    
    project_modules = []
    for file_path in rsc_files:
        filename = file_path.name
        if ("-Compact" not in filename and 
            not filename.startswith("Test-") and
            filename.startswith("Nasos-")):
            project_modules.append(file_path)
    
    if not project_modules:
        return [(False, "–ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ Nasos-*.rsc –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 0, 0)]
    
    results = []
    for module_path in project_modules:
        output_path = code_nasos_dir / module_path.name
        success, message, orig_size, comp_size = compact_routeros_file(
            str(module_path), str(output_path))
        results.append((success, message, orig_size, comp_size))
    
    return results

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} –±–∞–π—Ç"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.1f} MB"

def calculate_savings(original, compact):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏—é –º–µ—Å—Ç–∞"""
    if original == 0:
        return 0
    return ((original - compact) / original) * 100

def run_auto_compact():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö RouterOS —Å–∫—Ä–∏–ø—Ç–æ–≤ ===")
    print("–ê–≤—Ç–æ—Ä: –§–æ–∫–∏–Ω –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á")
    print("–î–∞—Ç–∞: 24 –∏—é–Ω—è 2025")
    print()
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ NasosRunner...")
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤ –ø–∞–ø–∫–µ CodeNasos/")
    print("-" * 80)
    
    results = auto_process_project()
    
    total_original = 0
    total_compact = 0
    success_count = 0
    
    for success, message, orig_size, comp_size in results:
        print(f"{'‚úì' if success else '‚úó'} {message}")
        
        if success:
            print(f"  –û—Ä–∏–≥–∏–Ω–∞–ª: {format_size(orig_size)} ‚Üí –ö–æ–º–ø–∞–∫—Ç: {format_size(comp_size)} "
                  f"(—ç–∫–æ–Ω–æ–º–∏—è {calculate_savings(orig_size, comp_size):.1f}%)")
            total_original += orig_size
            total_compact += comp_size
            success_count += 1
        
        print()
    
    if success_count > 0:
        print("-" * 80)
        print(f"‚úÖ –ò–¢–û–ì–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–¥—É–ª–µ–π: {success_count}")
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤: {format_size(total_original)}")
        print(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö: {format_size(total_compact)}")
        print(f"üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {format_size(total_original - total_compact)} "
              f"({calculate_savings(total_original, total_compact):.1f}%)")
        print()
        print("üéØ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Winbox!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è")

# –ê–í–¢–û–ó–ê–ü–£–°–ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    run_auto_compact()
    
    # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

# –ê–í–¢–û–ó–ê–ü–£–°–ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
run_auto_compact() 